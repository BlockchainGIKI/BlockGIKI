import { AddressRegistry } from './address-registry';
import { StableToken } from './celo-tokens';
import { newAccounts } from './generated/Accounts';
import { newAttestations } from './generated/Attestations';
import { newBlockchainParameters } from './generated/BlockchainParameters';
import { newDoubleSigningSlasher } from './generated/DoubleSigningSlasher';
import { newDowntimeSlasher } from './generated/DowntimeSlasher';
import { newElection } from './generated/Election';
import { newEpochRewards } from './generated/EpochRewards';
import { newEscrow } from './generated/Escrow';
import { newFederatedAttestations } from './generated/FederatedAttestations';
import { newFeeCurrencyWhitelist } from './generated/FeeCurrencyWhitelist';
import { newFreezer } from './generated/Freezer';
import { newGasPriceMinimum } from './generated/GasPriceMinimum';
import { newGoldToken } from './generated/GoldToken';
import { newGovernance } from './generated/Governance';
import { newIerc20 } from './generated/IERC20';
import { newLockedGold } from './generated/LockedGold';
import { newMetaTransactionWallet } from './generated/MetaTransactionWallet';
import { newMetaTransactionWalletDeployer } from './generated/MetaTransactionWalletDeployer';
import { newMultiSig } from './generated/MultiSig';
import { newOdisPayments } from './generated/OdisPayments';
import { newRandom } from './generated/Random';
import { newRegistry } from './generated/Registry';
import { newSortedOracles } from './generated/SortedOracles';
import { newValidators } from './generated/Validators';
import { newExchange } from './generated/mento/Exchange';
import { newExchangeBrl } from './generated/mento/ExchangeBRL';
import { newExchangeEur } from './generated/mento/ExchangeEUR';
import { newGrandaMento } from './generated/mento/GrandaMento';
import { newReserve } from './generated/mento/Reserve';
import { newStableToken } from './generated/mento/StableToken';
export declare const ContractFactories: {
    Accounts: typeof newAccounts;
    Attestations: typeof newAttestations;
    BlockchainParameters: typeof newBlockchainParameters;
    DoubleSigningSlasher: typeof newDoubleSigningSlasher;
    DowntimeSlasher: typeof newDowntimeSlasher;
    Election: typeof newElection;
    EpochRewards: typeof newEpochRewards;
    ERC20: typeof newIerc20;
    Escrow: typeof newEscrow;
    Exchange: typeof newExchange;
    ExchangeEUR: typeof newExchangeEur;
    ExchangeBRL: typeof newExchangeBrl;
    FederatedAttestations: typeof newFederatedAttestations;
    FeeCurrencyWhitelist: typeof newFeeCurrencyWhitelist;
    Freezer: typeof newFreezer;
    GasPriceMinimum: typeof newGasPriceMinimum;
    GoldToken: typeof newGoldToken;
    Governance: typeof newGovernance;
    GrandaMento: typeof newGrandaMento;
    LockedGold: typeof newLockedGold;
    MetaTransactionWallet: typeof newMetaTransactionWallet;
    MetaTransactionWalletDeployer: typeof newMetaTransactionWalletDeployer;
    MultiSig: typeof newMultiSig;
    OdisPayments: typeof newOdisPayments;
    Random: typeof newRandom;
    Registry: typeof newRegistry;
    Reserve: typeof newReserve;
    SortedOracles: typeof newSortedOracles;
    StableToken: typeof newStableToken;
    StableTokenEUR: typeof newStableToken;
    StableTokenBRL: typeof newStableToken;
    Validators: typeof newValidators;
};
export declare type CFType = typeof ContractFactories;
declare type ContractCacheMap = {
    [K in keyof CFType]?: ReturnType<CFType[K]>;
};
/**
 * Native Web3 contracts factory and cache.
 *
 * Exposes accessors to all `CeloContract` web3 contracts.
 *
 * Mostly a private cache, kit users would normally use
 * a contract wrapper
 */
export declare class Web3ContractCache {
    readonly registry: AddressRegistry;
    private cacheMap;
    /** core contract's address registry */
    constructor(registry: AddressRegistry);
    getAccounts(): Promise<import("./generated/Accounts").Accounts>;
    getAttestations(): Promise<import("./generated/Attestations").Attestations>;
    getBlockchainParameters(): Promise<import("./generated/BlockchainParameters").BlockchainParameters>;
    getDoubleSigningSlasher(): Promise<import("./generated/DoubleSigningSlasher").DoubleSigningSlasher>;
    getDowntimeSlasher(): Promise<import("./generated/DowntimeSlasher").DowntimeSlasher>;
    getElection(): Promise<import("./generated/Election").Election>;
    getEpochRewards(): Promise<import("./generated/EpochRewards").EpochRewards>;
    getErc20(address: string): Promise<import("./generated/IERC20").Ierc20>;
    getEscrow(): Promise<import("./generated/Escrow").Escrow>;
    getExchange(stableToken?: StableToken): Promise<import("./generated/Registry").Registry | import("./generated/Accounts").Accounts | import("./generated/mento/Exchange").Exchange | import("./generated/GoldToken").GoldToken | import("./generated/IERC20").Ierc20 | import("./generated/mento/StableToken").StableToken | import("./generated/Attestations").Attestations | import("./generated/BlockchainParameters").BlockchainParameters | import("./generated/DoubleSigningSlasher").DoubleSigningSlasher | import("./generated/DowntimeSlasher").DowntimeSlasher | import("./generated/Election").Election | import("./generated/EpochRewards").EpochRewards | import("./generated/Escrow").Escrow | import("./generated/FederatedAttestations").FederatedAttestations | import("./generated/FeeCurrencyWhitelist").FeeCurrencyWhitelist | import("./generated/Freezer").Freezer | import("./generated/GasPriceMinimum").GasPriceMinimum | import("./generated/Governance").Governance | import("./generated/LockedGold").LockedGold | import("./generated/MetaTransactionWallet").MetaTransactionWallet | import("./generated/MetaTransactionWalletDeployer").MetaTransactionWalletDeployer | import("./generated/MultiSig").MultiSig | import("./generated/OdisPayments").OdisPayments | import("./generated/Random").Random | import("./generated/SortedOracles").SortedOracles | import("./generated/Validators").Validators | import("./generated/mento/ExchangeBRL").ExchangeBrl | import("./generated/mento/ExchangeEUR").ExchangeEur | import("./generated/mento/GrandaMento").GrandaMento | import("./generated/mento/Reserve").Reserve>;
    getFederatedAttestations(): Promise<import("./generated/FederatedAttestations").FederatedAttestations>;
    getFeeCurrencyWhitelist(): Promise<import("./generated/FeeCurrencyWhitelist").FeeCurrencyWhitelist>;
    getFreezer(): Promise<import("./generated/Freezer").Freezer>;
    getGasPriceMinimum(): Promise<import("./generated/GasPriceMinimum").GasPriceMinimum>;
    getGoldToken(): Promise<import("./generated/GoldToken").GoldToken>;
    getGovernance(): Promise<import("./generated/Governance").Governance>;
    getGrandaMento(): Promise<import("./generated/mento/GrandaMento").GrandaMento>;
    getLockedGold(): Promise<import("./generated/LockedGold").LockedGold>;
    getMetaTransactionWallet(address: string): Promise<import("./generated/MetaTransactionWallet").MetaTransactionWallet>;
    getMetaTransactionWalletDeployer(address: string): Promise<import("./generated/MetaTransactionWalletDeployer").MetaTransactionWalletDeployer>;
    getMultiSig(address: string): Promise<import("./generated/MultiSig").MultiSig>;
    getOdisPayments(): Promise<import("./generated/OdisPayments").OdisPayments>;
    getRandom(): Promise<import("./generated/Random").Random>;
    getRegistry(): Promise<import("./generated/Registry").Registry>;
    getReserve(): Promise<import("./generated/mento/Reserve").Reserve>;
    getSortedOracles(): Promise<import("./generated/SortedOracles").SortedOracles>;
    getStableToken(stableToken?: StableToken): Promise<import("./generated/Registry").Registry | import("./generated/Accounts").Accounts | import("./generated/mento/Exchange").Exchange | import("./generated/GoldToken").GoldToken | import("./generated/IERC20").Ierc20 | import("./generated/mento/StableToken").StableToken | import("./generated/Attestations").Attestations | import("./generated/BlockchainParameters").BlockchainParameters | import("./generated/DoubleSigningSlasher").DoubleSigningSlasher | import("./generated/DowntimeSlasher").DowntimeSlasher | import("./generated/Election").Election | import("./generated/EpochRewards").EpochRewards | import("./generated/Escrow").Escrow | import("./generated/FederatedAttestations").FederatedAttestations | import("./generated/FeeCurrencyWhitelist").FeeCurrencyWhitelist | import("./generated/Freezer").Freezer | import("./generated/GasPriceMinimum").GasPriceMinimum | import("./generated/Governance").Governance | import("./generated/LockedGold").LockedGold | import("./generated/MetaTransactionWallet").MetaTransactionWallet | import("./generated/MetaTransactionWalletDeployer").MetaTransactionWalletDeployer | import("./generated/MultiSig").MultiSig | import("./generated/OdisPayments").OdisPayments | import("./generated/Random").Random | import("./generated/SortedOracles").SortedOracles | import("./generated/Validators").Validators | import("./generated/mento/ExchangeBRL").ExchangeBrl | import("./generated/mento/ExchangeEUR").ExchangeEur | import("./generated/mento/GrandaMento").GrandaMento | import("./generated/mento/Reserve").Reserve>;
    getValidators(): Promise<import("./generated/Validators").Validators>;
    /**
     * Get native web3 contract wrapper
     */
    getContract<C extends keyof typeof ContractFactories>(contract: C, address?: string): Promise<NonNullable<ContractCacheMap[C]>>;
    invalidateContract<C extends keyof typeof ContractFactories>(contract: C): void;
}
export {};
