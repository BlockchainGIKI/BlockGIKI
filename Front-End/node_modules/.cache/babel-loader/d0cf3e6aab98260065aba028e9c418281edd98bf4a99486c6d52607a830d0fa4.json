{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\n// import { useStopwatch } from \"react-timer-hook\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\n// import Demo from \"./Demo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  // const {\n  //     totalSeconds,\n  //     seconds,\n  //     minutes,\n  //     hours,\n  //     days,\n  //     isRunning,\n  //     start,\n  //     pause,\n  //     reset,\n  // } = useStopwatch();\n\n  // Getting and setting Solidity code from text box\n  const [text, setText] = useState(\"\");\n  // Getting and setting constructor input arguments from input box(es)\n  const [inputValues, setInputValues] = useState([]);\n  // Getting and setting constructor input arguments from ABI\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  // Getting and setting function input arguments from ABI\n  const [functionInputs, setFunctionInputs] = useState([]);\n  // Setting compiled to true if compile-button is pressed\n  const [compiled, setCompiled] = useState(false);\n  // Setting deployed to true if deploy-button is pressed\n  const [deployed, setDeployed] = useState(false);\n  // Getting and setting ABI from compile-button\n  const [ABI, setABI] = useState(\"\");\n  // Getting and setting Bytecode from compile-button\n  const [ByteCode, setByteCode] = useState(\"\");\n  // Getting and setting the contract address from deploy-button\n  const [ContractAddress, setContractAddress] = useState(\"\");\n  // Initializing the web3 object\n  const [web3, setWeb3] = useState(null);\n  // Getting and setting selected function of the deployed contract\n  const [selectedFunction, setSelectedFunction] = useState('');\n  // Getting and setting input parameters of selected function of the deployed contract\n  const [functionInputValues, setfunctionInputValues] = useState([]);\n  // Getting and setting the performance metric for analysis of the deployed contract\n  const [selectedMetric, setSelectedMetric] = useState('');\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    if (constructorInputs[index].type === 'uint256') {\n      console.log('Number');\n      newInputValues[index] = Number(value);\n    } else {\n      console.log(constructorInputs);\n      newInputValues[index] = value;\n    }\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  const handleFunctionChange = event => {\n    setSelectedFunction(event.target.value);\n    setfunctionInputValues([]); // Reset input values when the function changes\n  };\n\n  const handlefunctionInputChange = (event, index) => {\n    const newInputValues = [...inputValues];\n    newInputValues[index] = event.target.value;\n    setfunctionInputValues(newInputValues);\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  async function compileContract() {\n    const params = {\n      contractName: 'Storage',\n      sourceCode: text,\n      network: 'Something'\n    };\n    try {\n      console.log(\"At text area\");\n      const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n        params\n      });\n      console.log(response.data);\n      if (response.data.result.abi) {\n        window.alert('Compiled successfully');\n      } else {\n        window.alert(response.data.result);\n      }\n      setByteCode(response.data.result.bytecode);\n      setABI(response.data.result.abi);\n      // Find the constructor in the ABI\n      const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n      if (constructor) {\n        // Access constructor parameters and their types\n        const constructorInputs = constructor.inputs || [];\n        console.log('Constructor Parameters:');\n        constructorInputs.forEach(param => {\n          console.log(`Name: ${param.name}, Type: ${param.type}`);\n        });\n        setConstructorInputs(constructorInputs);\n      } else {\n        console.log('No constructor found in the ABI.');\n      }\n      console.log('Constructor Inputs', constructorInputs);\n      setCompiled(true);\n      // await sleep(5000);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  async function connectToMetaMask() {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const selectedAccount = accounts[0];\n        console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n        return selectedAccount;\n      } else {\n        console.error('MetaMask not detected.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      return null;\n    }\n  }\n\n  // Function to deploy the contract\n  const deployContract = async () => {\n    if (!compiled) {\n      window.alert('Please compile the contract first.');\n      return;\n    } else {\n      try {\n        // Use Web3.js to create a contract instance\n        const selectedAccount = await connectToMetaMask();\n        const contract = new web3.eth.Contract(ABI);\n        // Deploy the contract\n        const deployedContract = await contract.deploy({\n          data: ByteCode,\n          arguments: inputValues\n        }).send({\n          from: selectedAccount,\n          gas: '5000000' // Adjust the gas limit accordingly\n        });\n\n        console.log('Contract deployed at:', deployedContract.options.address);\n        setContractAddress(deployedContract.options.address);\n        const params = {\n          name: 'Something',\n          network: 'Polygon Mumbai',\n          deployer: selectedAccount,\n          address: deployedContract.options.address\n        };\n        const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', {\n          params\n        });\n        console.log(response.data);\n        const ftns = ABI.filter(item => item.type === 'function').map(func => {\n          return {\n            name: func.name,\n            type: func.type,\n            // params: func.inputs.length,\n            inputs: func.inputs.map(param => ({\n              name: param.name,\n              type: param.type\n            }))\n          };\n        });\n        setFunctionInputs(ftns);\n        setDeployed(true);\n      } catch (error) {\n        console.error('Error deploying smart contract:', error);\n      }\n    }\n  };\n  async function measureMetrics() {\n    setDeployed(true);\n    if (!deployed) {\n      window.alert('Deploy the smart contract first');\n    } else {\n      console.log(selectedFunction);\n      console.log('Function Inputs: ', functionInputValues);\n      console.log('Metric: ', selectedMetric);\n      const selectedAccount = connectToMetaMask();\n      // const contract = new web3.eth.Contract(ABI, ContractAddress);\n      const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n      const transactionObject = {\n        from: selectedAccount,\n        gas: 50000,\n        gasPrice: '700000000000'\n      };\n      // const data = web3.eth.abi.encodeFunctionCall(selectedFunction, functionInputValues);\n      const dummy = 'retrieve';\n      switch (selectedMetric) {\n        case 'Latency':\n          const startTime = performance.now();\n          const response = await contract.methods[dummy]().call();\n          const endTime = performance.now();\n          const latency = (endTime - startTime) / 1000;\n          console.log(response);\n          console.log('Latency: ', latency);\n        // }\n      }\n    }\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: param.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: param.type,\n        value: inputValues[index] || '',\n        onChange: e => handleInputChange(index, e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this));\n    const jsxContent = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Dropdown Menu based on Function Names\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleFunctionChange,\n        value: selectedFunction,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a function\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), functionInputs.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Input Boxes based on Function Inputs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 25\n        }, this), functionInputs.find(item => item.name === selectedFunction).inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: input.type,\n          placeholder: input.name,\n          value: functionInputValues[index] || '',\n          onChange: event => handlefunctionInputChange(event, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Dropdown Menu for Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleMetricChange,\n        value: selectedMetric,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a metric\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Latency\",\n          children: \"Latency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Throughput\",\n          children: \"Throughput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Paste your code below:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"inner\",\n        id: \"large-text\",\n        name: \"large-text\",\n        rows: \"25\",\n        cols: \"70\",\n        value: text,\n        onChange: handleTextAreaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Or upload the code file here:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"compile-button\",\n        onClick: compileContract,\n        children: \" Compile Contract \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deployContract,\n        children: \"Deploy Contract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), jsxContent, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: measureMetrics,\n        children: \"Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(TextArea, \"llXSDF0xzga03SCMUQAMZjUP4+M=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","FileUpload","jsxDEV","_jsxDEV","Fragment","_Fragment","TextArea","_s","text","setText","inputValues","setInputValues","constructorInputs","setConstructorInputs","functionInputs","setFunctionInputs","compiled","setCompiled","deployed","setDeployed","ABI","setABI","ByteCode","setByteCode","ContractAddress","setContractAddress","web3","setWeb3","selectedFunction","setSelectedFunction","functionInputValues","setfunctionInputValues","selectedMetric","setSelectedMetric","window","ethereum","web3Instance","console","log","error","handleInputChange","index","value","newInputValues","type","Number","handleTextAreaChange","e","target","handleFunctionChange","event","handlefunctionInputChange","handleMetricChange","compileContract","params","contractName","sourceCode","network","response","get","data","result","abi","alert","bytecode","constructor","find","item","inputs","forEach","param","name","connectToMetaMask","accounts","request","method","selectedAccount","deployContract","contract","eth","Contract","deployedContract","deploy","arguments","send","from","gas","options","address","deployer","ftns","filter","map","func","measureMetrics","Demo","transactionObject","gasPrice","dummy","startTime","performance","now","methods","call","endTime","latency","inputBoxes","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","jsxContent","input","className","id","rows","cols","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\n// import { useStopwatch } from \"react-timer-hook\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\n// import Demo from \"./Demo\";\n\nfunction TextArea() {\n    // const {\n    //     totalSeconds,\n    //     seconds,\n    //     minutes,\n    //     hours,\n    //     days,\n    //     isRunning,\n    //     start,\n    //     pause,\n    //     reset,\n    // } = useStopwatch();\n\n    // Getting and setting Solidity code from text box\n    const [text, setText] = useState(\"\");\n    // Getting and setting constructor input arguments from input box(es)\n    const [inputValues, setInputValues] = useState([]);\n    // Getting and setting constructor input arguments from ABI\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    // Getting and setting function input arguments from ABI\n    const [functionInputs, setFunctionInputs] = useState([]);\n    // Setting compiled to true if compile-button is pressed\n    const [compiled, setCompiled] = useState(false);\n    // Setting deployed to true if deploy-button is pressed\n    const [deployed, setDeployed] = useState(false);\n    // Getting and setting ABI from compile-button\n    const [ABI, setABI] = useState(\"\");\n    // Getting and setting Bytecode from compile-button\n    const [ByteCode, setByteCode] = useState(\"\");\n    // Getting and setting the contract address from deploy-button\n    const [ContractAddress, setContractAddress] = useState(\"\");\n    // Initializing the web3 object\n    const [web3, setWeb3] = useState(null);\n    // Getting and setting selected function of the deployed contract\n    const [selectedFunction, setSelectedFunction] = useState('');\n    // Getting and setting input parameters of selected function of the deployed contract\n    const [functionInputValues, setfunctionInputValues] = useState([]);\n    // Getting and setting the performance metric for analysis of the deployed contract\n    const [selectedMetric, setSelectedMetric] = useState('');\n\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        if (constructorInputs[index].type === 'uint256') {\n            console.log('Number');\n            newInputValues[index] = Number(value);\n        }\n        else {\n            console.log(constructorInputs);\n            newInputValues[index] = value;\n        }\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    const handleFunctionChange = (event) => {\n        setSelectedFunction(event.target.value);\n        setfunctionInputValues([]); // Reset input values when the function changes\n    };\n\n    const handlefunctionInputChange = (event, index) => {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = event.target.value;\n        setfunctionInputValues(newInputValues);\n    };\n\n    const handleMetricChange = (event) => {\n        setSelectedMetric(event.target.value);\n    };\n\n    async function compileContract() {\n        const params = {\n            contractName: 'Storage',\n            sourceCode: text,\n            network: 'Something'\n        };\n        try {\n            console.log(\"At text area\");\n            const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n            console.log(response.data);\n            if (response.data.result.abi) {\n                window.alert('Compiled successfully');\n            } else {\n                window.alert(response.data.result);\n            }\n            setByteCode(response.data.result.bytecode);\n            setABI(response.data.result.abi)\n            // Find the constructor in the ABI\n            const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n            if (constructor) {\n                // Access constructor parameters and their types\n                const constructorInputs = constructor.inputs || [];\n                console.log('Constructor Parameters:');\n                constructorInputs.forEach(param => {\n                    console.log(`Name: ${param.name}, Type: ${param.type}`);\n                });\n                setConstructorInputs(constructorInputs);\n            } else {\n                console.log('No constructor found in the ABI.');\n            }\n            console.log('Constructor Inputs', constructorInputs);\n            setCompiled(true);\n            // await sleep(5000);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    async function connectToMetaMask() {\n        try {\n            if (window.ethereum) {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                const selectedAccount = accounts[0];\n                console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n                return selectedAccount;\n            } else {\n                console.error('MetaMask not detected.');\n                return null;\n            }\n        } catch (error) {\n            console.error('Error connecting to MetaMask:', error);\n            return null;\n        }\n    }\n\n    // Function to deploy the contract\n    const deployContract = async () => {\n        if (!compiled) {\n            window.alert('Please compile the contract first.');\n            return;\n        }\n        else {\n            try {\n                // Use Web3.js to create a contract instance\n                const selectedAccount = await connectToMetaMask();\n                const contract = new web3.eth.Contract(ABI);\n                // Deploy the contract\n                const deployedContract = await contract\n                    .deploy({\n                        data: ByteCode,\n                        arguments: inputValues\n                    })\n                    .send({\n                        from: selectedAccount,\n                        gas: '5000000', // Adjust the gas limit accordingly\n                    });\n                console.log('Contract deployed at:', deployedContract.options.address);\n                setContractAddress(deployedContract.options.address);\n                const params = {\n                    name: 'Something',\n                    network: 'Polygon Mumbai',\n                    deployer: selectedAccount,\n                    address: deployedContract.options.address\n                };\n                const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n                console.log(response.data);\n                const ftns = ABI\n                    .filter(item => item.type === 'function')\n                    .map(func => {\n                        return {\n                            name: func.name,\n                            type: func.type,\n                            // params: func.inputs.length,\n                            inputs: func.inputs.map(param => ({\n                                name: param.name,\n                                type: param.type,\n                            })),\n                        };\n                    });\n                setFunctionInputs(ftns);\n                setDeployed(true);\n            } catch (error) {\n                console.error('Error deploying smart contract:', error);\n            }\n        }\n    };\n\n    async function measureMetrics() {\n        setDeployed(true);\n        if (!deployed) {\n            window.alert('Deploy the smart contract first')\n        }\n        else {\n            console.log(selectedFunction)\n            console.log('Function Inputs: ', functionInputValues);\n            console.log('Metric: ', selectedMetric);\n            const selectedAccount = connectToMetaMask();\n            // const contract = new web3.eth.Contract(ABI, ContractAddress);\n            const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n            const transactionObject = {\n                from: selectedAccount,\n                gas: 50000,\n                gasPrice: '700000000000'\n            };\n            // const data = web3.eth.abi.encodeFunctionCall(selectedFunction, functionInputValues);\n            const dummy = 'retrieve';\n            switch (selectedMetric) {\n                case 'Latency':\n                    const startTime = performance.now();\n                    const response = await contract.methods[dummy]().call();\n                    const endTime = performance.now();\n                    const latency = (endTime - startTime) / 1000;\n                    console.log(response);\n                    console.log('Latency: ', latency);\n                // }\n            }\n        }\n        // Render input boxes based on constructor inputs\n        const inputBoxes = constructorInputs.map((param, index) => (\n            <div key={index}>\n                <label>{param.name}</label>\n                <input\n                    type=\"text\"\n                    placeholder={param.type}\n                    value={inputValues[index] || ''}\n                    onChange={(e) => handleInputChange(index, e.target.value)}\n                />\n            </div>\n        ));\n\n        const jsxContent = (\n            <div>\n                <h2>Dropdown Menu based on Function Names</h2>\n                <select onChange={handleFunctionChange} value={selectedFunction}>\n                    <option value=\"\">Select a function</option>\n                    {functionInputs.map((item, index) => (\n                        <option key={index} value={item.name}>\n                            {item.name}\n                        </option>\n                    ))}\n                </select>\n\n                {selectedFunction && (\n                    <>\n                        <h2>Input Boxes based on Function Inputs</h2>\n                        {functionInputs\n                            .find((item) => item.name === selectedFunction)\n                            .inputs.map((input, index) => (\n                                <input\n                                    key={index}\n                                    type={input.type}\n                                    placeholder={input.name}\n                                    value={functionInputValues[index] || ''}\n                                    onChange={(event) => handlefunctionInputChange(event, index)}\n                                />\n                            ))}\n                    </>\n                )}\n\n                <h2>Dropdown Menu for Metrics</h2>\n                <select onChange={handleMetricChange} value={selectedMetric}>\n                    <option value=\"\">Select a metric</option>\n                    <option value=\"Latency\">Latency</option>\n                    <option value=\"Throughput\">Throughput</option>\n                </select>\n            </div>\n        );\n\n        return (\n            <div className=\"text-area\">\n                <h4>Paste your code below:</h4>\n                <textarea\n                    className=\"inner\"\n                    id=\"large-text\"\n                    name=\"large-text\"\n                    rows=\"25\"\n                    cols=\"70\"\n                    value={text}\n                    onChange={handleTextAreaChange}\n                ></textarea>\n                <br />\n                <h4>Or upload the code file here:</h4>\n                <FileUpload></FileUpload>\n                <button className=\"compile-button\" onClick={compileContract}> Compile Contract </button>\n                {inputBoxes}\n                <button onClick={deployContract}>Deploy Contract</button>\n                {jsxContent}\n                <button onClick={measureMetrics}>Measure</button>\n            </div>\n        );\n    }\n}\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}