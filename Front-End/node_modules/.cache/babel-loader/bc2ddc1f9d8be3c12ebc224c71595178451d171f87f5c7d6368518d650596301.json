{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/DynamicTable/DynamicTable.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport TransactionHistory from \"../Performance-Metric/PerformanceMetricData\";\nimport './DynamicTable.styles.css';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { selectChange } from \"../../changeSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicTable = () => {\n  _s();\n  // get table column\n  var column;\n  var actualValue = {};\n  var tableData = [];\n  // Get table headers in array\n  const [col, setColumn] = useState([]);\n  const account = useSelector(selectAccount);\n  const change = useSelector(selectChange);\n  // Fetch table headers on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const params = {\n          account: account\n        };\n        const response = await axios.get('http://10.1.33.124:8000/get-latency-data', {\n          params\n        });\n        // console.log(\"Crank Gameplayes: \", response.data);\n        // Assuming your response.data is an array of column names\n        setColumn(response.data);\n        console.log('Chnage: ', change);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [account]); // Empty dependency array to run the effect only once on mount\n  column = Object.keys(TransactionHistory[0]);\n  // Object.assign(actualValue, TransactionHistory);\n  if (col.length > 0) {\n    column = Object.keys(col[0]);\n    Object.assign(actualValue, col);\n  }\n  tableData = Object.values(actualValue);\n  // console.log(\"Table data\", tableData);\n  // get table heading data\n  const ThData = () => {\n    return column.map(data => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        children: data\n      }, data, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  // get table row data\n  const tdData = () => {\n    return tableData.map(data => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: column.map(v => {\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[v]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-Dynamic\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \" Performance metric table \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: ThData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tdData()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicTable, \"gn4zbTO6ZdyzICF20x/0E/JP2Ec=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = DynamicTable;\nexport default DynamicTable;\nvar _c;\n$RefreshReg$(_c, \"DynamicTable\");","map":{"version":3,"names":["React","useEffect","useState","TransactionHistory","axios","useSelector","selectAccount","selectChange","jsxDEV","_jsxDEV","DynamicTable","_s","column","actualValue","tableData","col","setColumn","account","change","fetchData","params","response","get","data","console","log","error","Object","keys","length","assign","values","ThData","map","children","fileName","_jsxFileName","lineNumber","columnNumber","tdData","v","className","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/DynamicTable/DynamicTable.component.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TransactionHistory from \"../Performance-Metric/PerformanceMetricData\";\nimport './DynamicTable.styles.css';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { selectChange } from \"../../changeSlice\";\n\nconst DynamicTable = () => {\n    // get table column\n    var column;\n    var actualValue = {};\n    var tableData = [];\n    // Get table headers in array\n    const [col, setColumn] = useState([]);\n    const account = useSelector(selectAccount);\n    const change = useSelector(selectChange);\n    // Fetch table headers on component mount\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const params = { account: account };\n                const response = await axios.get('http://10.1.33.124:8000/get-latency-data', { params });\n                // console.log(\"Crank Gameplayes: \", response.data);\n                // Assuming your response.data is an array of column names\n                setColumn(response.data);\n                console.log('Chnage: ', change);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n        fetchData();\n    }, [account]); // Empty dependency array to run the effect only once on mount\n    column = Object.keys(TransactionHistory[0]);\n    // Object.assign(actualValue, TransactionHistory);\n    if (col.length > 0) {\n        column = Object.keys(col[0]);\n        Object.assign(actualValue, col);\n    }\n    tableData = Object.values(actualValue);\n    // console.log(\"Table data\", tableData);\n    // get table heading data\n    const ThData = () => {\n        return column.map((data) => {\n            return <th key={data}>{data}</th>\n        })\n    }\n\n    // get table row data\n    const tdData = () => {\n        return tableData.map((data) => {\n            return (\n                <tr>\n                    {\n                        column.map((v) => {\n                            return <td>{data[v]}</td>\n                        })\n                    }\n                </tr>\n            )\n        })\n    }\n\n    return (\n        <div className=\"card-Dynamic\">\n            <h4> Performance metric table </h4>\n            <table>\n                <thead>\n                    <tr>{ThData()}</tr>\n                </thead>\n                <tbody>\n                    {tdData()}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default DynamicTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}