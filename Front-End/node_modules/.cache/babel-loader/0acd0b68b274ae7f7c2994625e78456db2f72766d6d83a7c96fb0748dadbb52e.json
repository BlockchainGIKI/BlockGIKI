{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [inputValues, setInputValues] = useState([]);\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  const [compiled, setCompiled] = useState(false);\n  const [ABI, setABI] = useState(\"\");\n  const [ByteCode, setByteCode] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    if (constructorInputs.Type === 'uint256') {\n      console.log('Number');\n      newInputValues[index] = Number(value);\n    } else {\n      console.log('string');\n      newInputValues[index] = value;\n    }\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  async function compileContract() {\n    const params = {\n      contractName: 'Storage',\n      sourceCode: text,\n      network: 'Something'\n    };\n    try {\n      console.log(\"At text area\");\n      const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n        params\n      });\n      console.log(response.data);\n      if (response.data.result.abi) {\n        window.alert('Compiled successfully');\n      } else {\n        window.alert(response.data.result);\n      }\n      setByteCode(response.data.result.bytecode);\n      setABI(response.data.result.abi);\n      // Find the constructor in the ABI\n      const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n      if (constructor) {\n        // Access constructor parameters and their types\n        const constructorInputs = constructor.inputs || [];\n        console.log('Constructor Parameters:');\n        constructorInputs.forEach(param => {\n          console.log(`Name: ${param.name}, Type: ${param.type}`);\n        });\n        setConstructorInputs(constructorInputs);\n      } else {\n        console.log('No constructor found in the ABI.');\n      }\n      console.log('Constructor Inputs', constructorInputs);\n      setCompiled(true);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  async function connectToMetaMask() {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const selectedAccount = accounts[0];\n        console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n        return selectedAccount;\n      } else {\n        console.error('MetaMask not detected.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      return null;\n    }\n  }\n\n  // Function to deploy the contract\n  const deployContract = async () => {\n    if (!compiled) {\n      window.alert('Please compile the contract first.');\n      return;\n    } else {\n      try {\n        // Use Web3.js to create a contract instance\n        const selectedAccount = await connectToMetaMask();\n        const contract = new web3.eth.Contract(ABI);\n        // Deploy the contract\n        const deployedContract = await contract.deploy({\n          data: ByteCode,\n          arguments: constructorInputs\n        }).send({\n          from: selectedAccount,\n          gas: '5000000' // Adjust the gas limit accordingly\n        });\n\n        console.log('Contract deployed at:', deployedContract.options.address);\n      } catch (error) {\n        console.error('Error deploying smart contract:', error);\n      }\n    }\n  };\n\n  // Render input boxes based on constructor inputs\n  const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: param.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: param.type,\n      value: inputValues[index] || '',\n      onChange: e => handleInputChange(index, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Paste your code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"inner\",\n      id: \"large-text\",\n      name: \"large-text\",\n      rows: \"25\",\n      cols: \"70\",\n      value: text,\n      onChange: handleTextAreaChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Or upload the code file here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compile-button\",\n      onClick: compileContract,\n      children: \" Compile Contract \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deployContract,\n      children: \"Deploy Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n}\n_s(TextArea, \"FoZ2qHg9E7UZGpSr7/mE4hZ0BIY=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","FileUpload","jsxDEV","_jsxDEV","TextArea","_s","text","setText","inputValues","setInputValues","constructorInputs","setConstructorInputs","compiled","setCompiled","ABI","setABI","ByteCode","setByteCode","web3","setWeb3","window","ethereum","web3Instance","console","log","error","handleInputChange","index","value","newInputValues","Type","Number","handleTextAreaChange","e","target","compileContract","params","contractName","sourceCode","network","response","get","data","result","abi","alert","bytecode","constructor","find","item","type","inputs","forEach","param","name","connectToMetaMask","accounts","request","method","selectedAccount","deployContract","contract","eth","Contract","deployedContract","deploy","arguments","send","from","gas","options","address","inputBoxes","map","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","className","id","rows","cols","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\n\nfunction TextArea() {\n    const [text, setText] = useState(\"\");\n    const [inputValues, setInputValues] = useState([]);\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    const [compiled, setCompiled] = useState(false);\n    const [ABI, setABI] = useState(\"\");\n    const [ByteCode, setByteCode] = useState(\"\");\n    const [web3, setWeb3] = useState(null);\n\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        if (constructorInputs.Type === 'uint256') {\n            console.log('Number');\n            newInputValues[index] = Number(value);\n        }\n        else {\n            console.log('string');\n            newInputValues[index] = value;\n        }\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    async function compileContract() {\n        const params = {\n            contractName: 'Storage',\n            sourceCode: text,\n            network: 'Something'\n        };\n        try {\n            console.log(\"At text area\");\n            const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n            console.log(response.data);\n            if (response.data.result.abi) {\n                window.alert('Compiled successfully');\n            } else {\n                window.alert(response.data.result);\n            }\n            setByteCode(response.data.result.bytecode);\n            setABI(response.data.result.abi)\n            // Find the constructor in the ABI\n            const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n            if (constructor) {\n                // Access constructor parameters and their types\n                const constructorInputs = constructor.inputs || [];\n                console.log('Constructor Parameters:');\n                constructorInputs.forEach(param => {\n                    console.log(`Name: ${param.name}, Type: ${param.type}`);\n                });\n                setConstructorInputs(constructorInputs);\n            } else {\n                console.log('No constructor found in the ABI.');\n            }\n            console.log('Constructor Inputs', constructorInputs);\n            setCompiled(true);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    async function connectToMetaMask() {\n        try {\n            if (window.ethereum) {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                const selectedAccount = accounts[0];\n                console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n                return selectedAccount;\n            } else {\n                console.error('MetaMask not detected.');\n                return null;\n            }\n        } catch (error) {\n            console.error('Error connecting to MetaMask:', error);\n            return null;\n        }\n    }\n\n    // Function to deploy the contract\n    const deployContract = async () => {\n        if (!compiled) {\n            window.alert('Please compile the contract first.');\n            return;\n        }\n        else {\n            try {\n                // Use Web3.js to create a contract instance\n                const selectedAccount = await connectToMetaMask();\n                const contract = new web3.eth.Contract(ABI);\n                // Deploy the contract\n                const deployedContract = await contract\n                    .deploy({\n                        data: ByteCode,\n                        arguments: constructorInputs\n                    })\n                    .send({\n                        from: selectedAccount,\n                        gas: '5000000', // Adjust the gas limit accordingly\n                    });\n                console.log('Contract deployed at:', deployedContract.options.address);\n            } catch (error) {\n                console.error('Error deploying smart contract:', error);\n            }\n        }\n    };\n\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => (\n        <div key={index}>\n            <label>{param.name}</label>\n            <input\n                type=\"text\"\n                placeholder={param.type}\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(index, e.target.value)}\n            />\n        </div>\n    ));\n\n    return (\n        <div className=\"text-area\">\n            <h4>Paste your code below:</h4>\n            <textarea\n                className=\"inner\"\n                id=\"large-text\"\n                name=\"large-text\"\n                rows=\"25\"\n                cols=\"70\"\n                value={text}\n                onChange={handleTextAreaChange}\n            ></textarea>\n            <br />\n            <h4>Or upload the code file here:</h4>\n            <FileUpload></FileUpload>\n            <button className=\"compile-button\" onClick={compileContract}> Compile Contract </button>\n            {inputBoxes}\n            <button onClick={deployContract}>Deploy Contract</button>\n        </div>\n    );\n}\n\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}