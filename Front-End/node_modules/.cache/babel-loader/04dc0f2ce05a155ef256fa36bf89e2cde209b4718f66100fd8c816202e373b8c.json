{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Main-Dashboard/Main-dashboard.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Main-dashboard.styles.css';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport abi from './Contract';\nimport config from './constants';\nimport Web3 from \"web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainDashboard = () => {\n  _s();\n  const [selectedBlockchain, setSelectedBlockchain] = useState('');\n  const [endPoint, setEndPoint] = useState('');\n  const [metric, setSelectedMetric] = useState('');\n  const [selectedSmartContract, setSelectedSmartContract] = useState('');\n  const [transactions, setTransactions] = useState('');\n  const account = useSelector(selectAccount);\n  const handleBlockchainChange = e => {\n    setSelectedBlockchain(e.target.value);\n  };\n  const handleMetricChange = e => {\n    setSelectedMetric(e.target.value);\n  };\n  const handleContractChange = e => {\n    setSelectedSmartContract(e.target.value);\n  };\n  const handleChange = e => {\n    setEndPoint(e.target.value);\n  };\n  const handleTransactionsChange = e => {\n    setTransactions(e.target.value);\n  };\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n  async function measureMetrics() {\n    const selectedAccount = account;\n    const ContractAddress = config[selectedBlockchain]['ContractAddress'];\n    // const web3 = new Web3(config[selectedBlockchain]['RPC']);\n    const contract = new web3.eth.Contract(abi, ContractAddress);\n    var gas = 0;\n    var transactionObject = {};\n    console.log('At mM', metric);\n    return new Promise(async (resolve, reject) => {\n      if (metric === 'Latency') {\n        console.log('At mM', metric);\n        switch (selectedSmartContract) {\n          case 'createUser':\n            gas = await contract.methods.createUser(\"John Doe\", 100).estimateGas();\n            transactionObject = {\n              from: selectedAccount,\n              gas,\n              gasPrice: '70000000000'\n            };\n            try {\n              const startTime = performance.now();\n              const receipt = await contract.methods.createUser(\"John Doe\", 100).send(transactionObject);\n              const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n              const endTime = performance.now();\n              const perf_metric = (endTime - startTime) / 1000;\n              console.log(receipt);\n              console.log('Latency: ', perf_metric);\n              console.log('Transaction Fee: ', transactionFee);\n              resolve({\n                perf_metric,\n                transactionFee\n              });\n            } catch (error) {\n              console.log(\"Error: \", error);\n            }\n            break;\n          case 'issueMoney':\n            gas = await contract.methods.issueMoney(100, 1).estimateGas();\n            transactionObject = {\n              from: selectedAccount,\n              gas,\n              gasPrice: '70000000000'\n            };\n            try {\n              const startTime = performance.now();\n              const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n              const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n              const endTime = performance.now();\n              const perf_metric = (endTime - startTime) / 1000;\n              console.log(receipt);\n              console.log('Latency: ', perf_metric);\n              console.log('Transaction Fee: ', transactionFee);\n              resolve({\n                perf_metric,\n                transactionFee\n              });\n            } catch (error) {\n              console.log(\"Error: \", error);\n            }\n            break;\n          case 'transferMoney':\n            gas = await contract.methods.transferMoney(1, 1, 2).estimateGas();\n            transactionObject = {\n              from: selectedAccount,\n              gas,\n              gasPrice: '70000000000'\n            };\n            try {\n              const startTime = performance.now();\n              const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n              const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n              const endTime = performance.now();\n              const perf_metric = (endTime - startTime) / 1000;\n              console.log(receipt);\n              console.log('Latency: ', perf_metric);\n              console.log('Transaction Fee: ', transactionFee);\n              resolve({\n                perf_metric,\n                transactionFee\n              });\n            } catch (error) {\n              console.log(\"Error: \", error);\n            }\n            break;\n          default:\n            const startTime = performance.now();\n            console.log('At deafult', selectedSmartContract);\n            const response = await contract.methods[selectedSmartContract](1).call();\n            const endTime = performance.now();\n            const perf_metric = (endTime - startTime) / 1000;\n            console.log(response);\n            const transactionFee = 0;\n            console.log('Latency: ', perf_metric, transactionFee);\n            resolve({\n              perf_metric,\n              transactionFee\n            });\n        }\n      } else if (metric === 'Throughput') {\n        console.log('At mM', metric);\n        const promises = [];\n        // const nonce = await web3.eth.getTransactionCount(defaultAccount);\n        for (let i = 0; i < Number(transactions); i++) {\n          if (selectedSmartContract === 'getUser') {\n            console.log('AT if TPS');\n            promises.push(new Promise(async (resolve, reject) => {\n              try {\n                const response = await contract.methods[selectedSmartContract](1).call();\n                // const fee = 0;\n                // console.log('TPS response: ', response);\n                resolve(response);\n              } catch (error) {\n                reject(error);\n              }\n            }));\n          } else {\n            switch (selectedSmartContract) {\n              case 'createUser':\n                gas = await contract.methods.createUser(\"John Doe\", 100).estimateGas();\n                transactionObject = {\n                  from: selectedAccount,\n                  gas,\n                  gasPrice: '70000000000'\n                };\n                promises.push(new Promise(async (resolve, reject) => {\n                  try {\n                    const receipt = await contract.methods.createUser('John Doe', 100).send(transactionObject);\n                    // console.log('TPS response: ', response);\n                    resolve(receipt);\n                  } catch (error) {\n                    reject(error);\n                  }\n                }));\n                break;\n              case 'issueMoney':\n                gas = await contract.methods.issueMoney(100, 1).estimateGas();\n                transactionObject = {\n                  from: selectedAccount,\n                  gas,\n                  gasPrice: '70000000000'\n                };\n                promises.push(new Promise(async (resolve, reject) => {\n                  try {\n                    const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                    // console.log('TPS response: ', response);\n                    resolve(receipt);\n                  } catch (error) {\n                    reject(error);\n                  }\n                }));\n                break;\n              case 'transferMoney':\n                gas = await contract.methods.transferMoney(1, 1, 2).estimateGas();\n                transactionObject = {\n                  from: selectedAccount,\n                  gas,\n                  gasPrice: '70000000000'\n                };\n                promises.push(new Promise(async (resolve, reject) => {\n                  try {\n                    const receipt = await contract.methods.transferMoney(1, 1, 2).send(transactionObject);\n                    // console.log('TPS response: ', response);\n                    resolve(receipt);\n                  } catch (error) {\n                    reject(error);\n                  }\n                }));\n                break;\n              default:\n            }\n          }\n        }\n        const startTime = performance.now();\n        Promise.all(promises).then(receipts => {\n          const endTime = performance.now();\n          const duration = (endTime - startTime) / 1000;\n          const perf_metric = Number(transactions) / duration;\n          console.log(`Transactions Per Second (TPS): ${perf_metric}`);\n          console.log(receipts);\n          const transactionFee = receipts;\n          resolve({\n            perf_metric,\n            transactionFee\n          });\n        }).catch(error => {\n          console.error('Error:', error);\n          // reject(error);\n        });\n      }\n    });\n  }\n\n  async function requestAccount() {\n    console.log(\"At standard button: \", selectedSmartContract);\n    if (account) {\n      const {\n        perf_metric,\n        transactionFee\n      } = await measureMetrics();\n      console.log('Perf: ', perf_metric, transactionFee);\n      let txFee = 0;\n      if (metric === 'Throughput') {\n        if (selectedSmartContract !== 'getUser') {\n          for (let i = 0; i < transactions; i++) {\n            txFee += Number(transactionFee[i].effectiveGasPrice) * Number(transactionFee[i].gasUsed);\n          }\n          txFee = txFee / transactions / 1e18;\n        }\n      }\n      try {\n        const params = {\n          _perfMetric: perf_metric,\n          _fee: txFee,\n          network: selectedBlockchain,\n          selectedFunction: selectedSmartContract,\n          numTransactions: transactions,\n          metric: metric\n        };\n        console.log(params);\n        const response = await axios.get('http://10.1.33.124:8000/write-to-metrics-csv', {\n          params\n        });\n        console.log(response.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    } else {\n      const api = {\n        status: false,\n        url: endPoint\n      };\n      const address = {\n        status: false,\n        address: '0x'\n      };\n      const params = {\n        metric: metric,\n        network: selectedBlockchain,\n        API: api,\n        address: address,\n        transactions: transactions,\n        function_name: selectedSmartContract\n      };\n      try {\n        const response = await axios.get('http://10.1.33.124:8000/run-node-script', {\n          params\n        });\n        console.log(response.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select a Blockchain: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedBlockchain,\n      onChange: handleBlockchainChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Arbitum-Goerli\",\n        children: \"Arbitum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Celo\",\n        children: \"Alfajores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Linea-Goerli\",\n        children: \"Linea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Optimism-Goerli\",\n        children: \"Optimism\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Polygon-Mumbai\",\n        children: \"Mumbai\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Sepolia\",\n        children: \"Sepolia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-25\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter end point API key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-75\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"endPoint\",\n          value: endPoint,\n          onChange: handleChange,\n          placeholder: \"Type Endpoint API key\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select a Performance metric: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: metric,\n      onChange: handleMetricChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Latency\",\n        children: \"Latency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Throughput\",\n        children: \"Throughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"default\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 31\n    }, this), (metric === \"Throughput\" || metric === \"both\") && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"No. of transactions: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: transactions,\n        onChange: handleTransactionsChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"25\",\n          children: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"50\",\n          children: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Default smart contracts: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedSmartContract,\n      onChange: handleContractChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"createUser\",\n        children: \"Create User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"issueMoney\",\n        children: \"Issue money\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"transferMoney\",\n        children: \"Transfer Money\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"getUser\",\n        children: \"Get User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compute-button\",\n      onClick: requestAccount,\n      children: \" Compute \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 9\n  }, this);\n};\n_s(MainDashboard, \"o4f+HXrwkVDVgTNLXuJnyywSiWg=\", false, function () {\n  return [useSelector];\n});\n_c = MainDashboard;\nexport default MainDashboard;\nvar _c;\n$RefreshReg$(_c, \"MainDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","useSelector","selectAccount","abi","config","Web3","jsxDEV","_jsxDEV","MainDashboard","_s","selectedBlockchain","setSelectedBlockchain","endPoint","setEndPoint","metric","setSelectedMetric","selectedSmartContract","setSelectedSmartContract","transactions","setTransactions","account","handleBlockchainChange","e","target","value","handleMetricChange","handleContractChange","handleChange","handleTransactionsChange","web3","setWeb3","window","ethereum","web3Instance","console","log","error","measureMetrics","selectedAccount","ContractAddress","contract","eth","Contract","gas","transactionObject","Promise","resolve","reject","methods","createUser","estimateGas","from","gasPrice","startTime","performance","now","receipt","send","transactionFee","utils","fromWei","effectiveGasPrice","gasUsed","endTime","perf_metric","issueMoney","transferMoney","response","call","promises","i","Number","push","all","then","receipts","duration","catch","requestAccount","txFee","params","_perfMetric","_fee","network","selectedFunction","numTransactions","get","data","api","status","url","address","API","function_name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","name","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Main-Dashboard/Main-dashboard.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Main-dashboard.styles.css';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport abi from './Contract';\nimport config from './constants';\nimport Web3 from \"web3\";\n\nconst MainDashboard = () => {\n\n    const [selectedBlockchain, setSelectedBlockchain] = useState('');\n    const [endPoint, setEndPoint] = useState('');\n    const [metric, setSelectedMetric] = useState('');\n    const [selectedSmartContract, setSelectedSmartContract] = useState('');\n    const [transactions, setTransactions] = useState('');\n    const account = useSelector(selectAccount);\n\n    const handleBlockchainChange = (e) => {\n        setSelectedBlockchain(e.target.value);\n    };\n\n    const handleMetricChange = (e) => {\n        setSelectedMetric(e.target.value);\n    };\n\n    const handleContractChange = (e) => {\n        setSelectedSmartContract(e.target.value);\n    };\n\n    const handleChange = (e) => {\n        setEndPoint(e.target.value)\n    };\n\n    const handleTransactionsChange = (e) => {\n        setTransactions(e.target.value);\n    };\n    const [web3, setWeb3] = useState(null);\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    async function measureMetrics() {\n        const selectedAccount = account;\n        const ContractAddress = config[selectedBlockchain]['ContractAddress'];\n        // const web3 = new Web3(config[selectedBlockchain]['RPC']);\n        const contract = new web3.eth.Contract(abi, ContractAddress);\n        var gas = 0;\n        var transactionObject = {};\n        console.log('At mM', metric);\n        return new Promise(async (resolve, reject) => {\n            if (metric === 'Latency') {\n                console.log('At mM', metric);\n                switch (selectedSmartContract) {\n                    case 'createUser':\n                        gas = await contract.methods.createUser(\"John Doe\", 100).estimateGas();\n                        transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            const receipt = await contract.methods.createUser(\"John Doe\", 100).send(transactionObject);\n                            const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n                            const endTime = performance.now();\n                            const perf_metric = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', perf_metric);\n                            console.log('Transaction Fee: ', transactionFee);\n                            resolve({ perf_metric, transactionFee });\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                        break;\n                    case 'issueMoney':\n                        gas = await contract.methods.issueMoney(100, 1).estimateGas()\n                        transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                            const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n                            const endTime = performance.now();\n                            const perf_metric = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', perf_metric);\n                            console.log('Transaction Fee: ', transactionFee);\n                            resolve({ perf_metric, transactionFee });\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                        break;\n                    case 'transferMoney':\n                        gas = await contract.methods.transferMoney(1, 1, 2).estimateGas()\n                        transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                            const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n                            const endTime = performance.now();\n                            const perf_metric = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', perf_metric);\n                            console.log('Transaction Fee: ', transactionFee);\n                            resolve({ perf_metric, transactionFee });\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                        break;\n                    default:\n                        const startTime = performance.now();\n                        console.log('At deafult', selectedSmartContract);\n                        const response = await contract.methods[selectedSmartContract](1).call();\n                        const endTime = performance.now();\n                        const perf_metric = (endTime - startTime) / 1000;\n                        console.log(response);\n                        const transactionFee = 0;\n                        console.log('Latency: ', perf_metric, transactionFee);\n                        resolve({ perf_metric, transactionFee });\n                }\n            }\n            else if (metric === 'Throughput') {\n                console.log('At mM', metric);\n                const promises = [];\n                // const nonce = await web3.eth.getTransactionCount(defaultAccount);\n                for (let i = 0; i < Number(transactions); i++) {\n                    if (selectedSmartContract === 'getUser') {\n                        console.log('AT if TPS');\n                        promises.push(new Promise(async (resolve, reject) => {\n                            try {\n                                const response = await contract.methods[selectedSmartContract](1).call()\n                                // const fee = 0;\n                                // console.log('TPS response: ', response);\n                                resolve(response);\n                            } catch (error) {\n                                reject(error);\n                            }\n                        }));\n                    }\n                    else {\n                        switch (selectedSmartContract) {\n                            case 'createUser':\n                                gas = await contract.methods.createUser(\"John Doe\", 100).estimateGas();\n                                transactionObject = {\n                                    from: selectedAccount,\n                                    gas,\n                                    gasPrice: '70000000000',\n                                };\n                                promises.push(new Promise(async (resolve, reject) => {\n                                    try {\n                                        const receipt = await contract.methods.createUser('John Doe', 100).send(transactionObject);\n                                        // console.log('TPS response: ', response);\n                                        resolve(receipt);\n                                    } catch (error) {\n                                        reject(error);\n                                    }\n                                }));\n                                break;\n                            case 'issueMoney':\n                                gas = await contract.methods.issueMoney(100, 1).estimateGas()\n                                transactionObject = {\n                                    from: selectedAccount,\n                                    gas,\n                                    gasPrice: '70000000000',\n                                };\n                                promises.push(new Promise(async (resolve, reject) => {\n                                    try {\n                                        const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                                        // console.log('TPS response: ', response);\n                                        resolve(receipt);\n                                    } catch (error) {\n                                        reject(error);\n                                    }\n                                }));\n                                break;\n                            case 'transferMoney':\n                                gas = await contract.methods.transferMoney(1, 1, 2).estimateGas()\n                                transactionObject = {\n                                    from: selectedAccount,\n                                    gas,\n                                    gasPrice: '70000000000',\n                                };\n                                promises.push(new Promise(async (resolve, reject) => {\n                                    try {\n                                        const receipt = await contract.methods.transferMoney(1, 1, 2).send(transactionObject);\n                                        // console.log('TPS response: ', response);\n                                        resolve(receipt);\n                                    } catch (error) {\n                                        reject(error);\n                                    }\n                                }));\n                                break;\n                            default:\n                        }\n                    }\n                }\n                const startTime = performance.now();\n                Promise.all(promises)\n                    .then((receipts) => {\n                        const endTime = performance.now();\n                        const duration = (endTime - startTime) / 1000;\n                        const perf_metric = Number(transactions) / duration;\n                        console.log(`Transactions Per Second (TPS): ${perf_metric}`);\n                        console.log(receipts);\n                        const transactionFee = receipts;\n                        resolve({ perf_metric, transactionFee });\n                    })\n                    .catch((error) => {\n                        console.error('Error:', error);\n                        // reject(error);\n                    });\n            }\n        });\n    }\n\n\n    async function requestAccount() {\n        console.log(\"At standard button: \", selectedSmartContract);\n        if (account) {\n            const { perf_metric, transactionFee } = await measureMetrics();\n            console.log('Perf: ', perf_metric, transactionFee);\n            let txFee = 0;\n            if (metric === 'Throughput') {\n                if (selectedSmartContract !== 'getUser') {\n                    for (let i = 0; i < transactions; i++) {\n                        txFee += Number(transactionFee[i].effectiveGasPrice) * Number(transactionFee[i].gasUsed);\n                    }\n                    txFee = (txFee / transactions) / 1e18;\n                }\n            }\n            try {\n                const params = {\n                    _perfMetric: perf_metric,\n                    _fee: txFee,\n                    network: selectedBlockchain,\n                    selectedFunction: selectedSmartContract,\n                    numTransactions: transactions,\n                    metric: metric\n                };\n                console.log(params);\n                const response = await axios.get('http://10.1.33.124:8000/write-to-metrics-csv', { params });\n                console.log(response.data);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        }\n        else {\n            const api = {\n                status: false,\n                url: endPoint,\n            }\n            const address = {\n                status: false,\n                address: '0x'\n            }\n            const params = {\n                metric: metric,\n                network: selectedBlockchain,\n                API: api,\n                address: address,\n                transactions: transactions,\n                function_name: selectedSmartContract,\n            };\n            try {\n                const response = await axios.get('http://10.1.33.124:8000/run-node-script', { params });\n                console.log(response.data);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        }\n    }\n\n    return (\n        <div className=\"card-main\">\n            <label>Select a Blockchain: </label>\n            <select value={selectedBlockchain} onChange={handleBlockchainChange}>\n                <option value=\"Arbitum-Goerli\">Arbitum</option>\n                <option value=\"Celo\">Alfajores</option>\n                <option value=\"Linea-Goerli\">Linea</option>\n                <option value=\"Optimism-Goerli\">Optimism</option>\n                <option value=\"Polygon-Mumbai\">Mumbai</option>\n                <option value=\"Sepolia\">Sepolia</option>\n            </select><br></br><br></br>\n            <div className=\"row\">\n                <div className=\"col-25\">\n                    <label>Enter end point API key</label>\n                </div>\n                <div className=\"col-75\">\n                    <input\n                        type=\"text\"\n                        name=\"endPoint\"\n                        value={endPoint}\n                        onChange={handleChange}\n                        placeholder=\"Type Endpoint API key\"\n                        required\n                    />\n                </div>\n            </div><br></br><br></br>\n            <label>Select a Performance metric: </label>\n            <select value={metric} onChange={handleMetricChange}>\n                <option value=\"Latency\">Latency</option>\n                <option value=\"Throughput\">Throughput</option>\n                <option value=\"default\">All</option>\n            </select><br></br><br></br>\n            {(metric === \"Throughput\" || metric === \"both\") && (\n                <div>\n                    <label>No. of transactions: </label>\n                    <select value={transactions} onChange={handleTransactionsChange}>\n                        <option value=\"10\">10</option>\n                        <option value=\"25\">25</option>\n                        <option value=\"50\">50</option>\n                    </select><br></br><br></br>\n                </div>\n            )}\n            <label>Default smart contracts: </label>\n            <select value={selectedSmartContract} onChange={handleContractChange}>\n                <option value=\"createUser\">Create User</option>\n                <option value=\"issueMoney\">Issue money</option>\n                <option value=\"transferMoney\">Transfer Money</option>\n                <option value=\"getUser\">Get User</option>\n            </select><br></br><br></br>\n            <button className=\"compute-button\" onClick={requestAccount}> Compute </button>\n        </div>\n    )\n}\n\nexport default MainDashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}