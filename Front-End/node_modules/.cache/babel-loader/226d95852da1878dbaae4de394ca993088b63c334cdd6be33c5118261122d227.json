{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport Demo from \"./Demo\";\nimport { useSelector } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  // Getting and setting Solidity code from text box\n  const [text, setText] = useState(\"\");\n  // Getting and setting constructor input arguments from input box(es)\n  const [inputValues, setInputValues] = useState([]);\n  // Getting and setting constructor input arguments from ABI\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  // Getting and setting function input arguments from ABI\n  const [functionInputs, setFunctionInputs] = useState([]);\n  // Setting compiled to true if compile-button is pressed\n  const [compiled, setCompiled] = useState(false);\n  // Setting deployed to true if deploy-button is pressed\n  const [deployed, setDeployed] = useState(false);\n  // Getting and setting ABI from compile-button\n  const [ABI, setABI] = useState(\"\");\n  // Getting and setting Bytecode from compile-button\n  const [ByteCode, setByteCode] = useState(\"\");\n  // Getting and setting the contract address from deploy-button\n  const [ContractAddress, setContractAddress] = useState(\"\");\n  // Initializing the web3 object\n  const [web3, setWeb3] = useState(null);\n  // Getting and setting selected function of the deployed contract\n  const [selectedFunction, setSelectedFunction] = useState('');\n  // Getting and setting input parameters of selected function of the deployed contract\n  const [functionInputValues, setfunctionInputValues] = useState([]);\n  // Getting and setting the performance metric for analysis of the deployed contract\n  const [selectedMetric, setSelectedMetric] = useState('');\n  // Getting and setting the input batch transactions for throughput analysis of the deployed contract\n  const [selectedBatch, setselectedBatch] = useState('');\n  // Getting and setting user account from external Web3 provider\n  const account = useSelector(selectAccount);\n  // Getting and setting file content from uploaded file\n  const [fileContent, setFileContent] = useState(null);\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    if (constructorInputs[index].type === 'uint256') {\n      console.log('Number');\n      newInputValues[index] = Number(value);\n    } else {\n      console.log(constructorInputs);\n      newInputValues[index] = value;\n    }\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  const handleFunctionChange = event => {\n    setSelectedFunction(event.target.value);\n    setfunctionInputValues([]); // Reset input values when the function changes\n  };\n\n  const handlefunctionInputChange = (event, index) => {\n    const newInputValues = [...inputValues];\n    newInputValues[index] = event.target.value;\n    setfunctionInputValues(newInputValues);\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  const handleTransactionsChange = event => {\n    setselectedBatch(event.target.value);\n  };\n  const handleFileContent = content => {\n    setFileContent(content);\n  };\n  async function compileContract() {\n    if (text || fileContent) {\n      const params = {\n        contractName: 'Storage',\n        sourceCode: text,\n        network: 'Something'\n      };\n      try {\n        console.log(\"At text area\");\n        const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n          params\n        });\n        console.log(response.data);\n        if (response.data.result.abi) {\n          window.alert('Compiled successfully');\n        } else {\n          window.alert(response.data.result);\n        }\n        setByteCode(response.data.result.bytecode);\n        setABI(response.data.result.abi);\n        // Find the constructor in the ABI\n        const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n        if (constructor) {\n          // Access constructor parameters and their types\n          const constructorInputs = constructor.inputs || [];\n          console.log('Constructor Parameters:');\n          constructorInputs.forEach(param => {\n            console.log(`Name: ${param.name}, Type: ${param.type}`);\n          });\n          setConstructorInputs(constructorInputs);\n        } else {\n          console.log('No constructor found in the ABI.');\n        }\n        console.log('Constructor Inputs', constructorInputs);\n        setCompiled(true);\n\n        // await sleep(5000);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // console.log('Metamask', account);\n      }\n    } else {\n      window.alert('Please paste or upload the code');\n    }\n  }\n\n  // async function connectToMetaMask() {\n  //     try {\n  //         if (window.ethereum) {\n  //             const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  //             const selectedAccount = accounts[0];\n  //             console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n  //             return selectedAccount;\n  //         } else {\n  //             console.error('MetaMask not detected.');\n  //             return null;\n  //         }\n  //     } catch (error) {\n  //         console.error('Error connecting to MetaMask:', error);\n  //         return null;\n  //     }\n  // }\n\n  // Function to deploy the contract\n  const deployContract = async () => {\n    if (!compiled) {\n      window.alert('Please compile the contract first.');\n      return;\n    } else if (!account) {\n      try {\n        console.log(\"At deploy contracts elif \");\n        const api = {\n          status: false,\n          url: ''\n        };\n        const params = {\n          network: 'Polygon-Mumbai',\n          API: api,\n          ABI: Demo,\n          ByteCode: ByteCode,\n          inputValues: inputValues\n        };\n        const response = await axios.get('http://10.1.33.124:8000/deploy-contract', {\n          params\n        });\n        console.log(response.data);\n        if (response.data.result.address) {\n          window.alert(response.data.result.deployed);\n          // setContractAddress(response.data.result.address);\n          const ftns = Demo.filter(item => item.type === 'function').map(func => {\n            return {\n              name: func.name,\n              type: func.type,\n              stateMutability: func.stateMutability,\n              // params: func.inputs.length,\n              inputs: func.inputs.map(param => ({\n                name: param.name,\n                type: param.type\n              }))\n            };\n          });\n          setFunctionInputs(ftns);\n          setContractAddress(response.data.result.address);\n          setDeployed(true);\n        } else {\n          window.alert(`Error deploying contract: ${response.data.result.message}`);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // console.log('Metamask', account);\n      }\n    } else {\n      try {\n        // Use Web3.js to create a contract instance\n        // const selectedAccount = await connectToMetaMask();\n        // const contract = new web3.eth.Contract(ABI);\n        // // Deploy the contract\n        // const deployedContract = await contract\n        //     .deploy({\n        //         data: ByteCode,\n        //         arguments: inputValues\n        //     })\n        //     .send({\n        //         from: selectedAccount,\n        //         gas: '5000000', // Adjust the gas limit accordingly\n        //     });\n        // console.log('Contract deployed at:', deployedContract.options.address);\n        // setContractAddress(deployedContract.options.address);\n        // const params = {\n        //     name: 'Something',\n        //     network: 'Polygon Mumbai',\n        //     deployer: selectedAccount,\n        //     address: deployedContract.options.address\n        // };\n        // const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n        // console.log(response.data);\n        const ftns = Demo.filter(item => item.type === 'function').map(func => {\n          return {\n            name: func.name,\n            type: func.type,\n            stateMutability: func.stateMutability,\n            // params: func.inputs.length,\n            inputs: func.inputs.map(param => ({\n              name: param.name,\n              type: param.type\n            }))\n          };\n        });\n        setFunctionInputs(ftns);\n        setDeployed(true);\n      } catch (error) {\n        console.error('Error deploying smart contract:', error);\n      }\n    }\n  };\n  async function measureMetrics() {\n    // setDeployed(true);\n    if (!deployed) {\n      window.alert('Deploy the smart contract first');\n    } else if (!account) {\n      try {\n        console.log(\"At measure metrics elif \");\n        const ftn = functionInputs.filter(item => item.name === selectedFunction);\n        const type = ftn[0].stateMutability;\n        const api = {\n          status: false,\n          url: ''\n        };\n        const params = {\n          network: 'Polygon-Mumbai',\n          API: api,\n          ABI: Demo,\n          address: '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4',\n          metric: selectedMetric,\n          ftn: selectedFunction,\n          ftnInputs: functionInputValues,\n          type: type,\n          transactions: selectedBatch\n        };\n        const response = await axios.get('http://10.1.33.124:8000/measure-function-call-metrics', {\n          params\n        });\n        console.log(response.data);\n        if (response.data.result.perf) {\n          window.alert('Measured successfully');\n        } else {\n          window.alert('Eror during measurments: ', response.data.result.perf);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // console.log('Metamask', account);\n      }\n    } else {\n      console.log(functionInputs);\n      console.log(selectedFunction);\n      console.log('Function Inputs: ', functionInputValues);\n      console.log('Metric: ', selectedMetric);\n      // const selectedAccount = await connectToMetaMask();\n      const selectedAccount = account;\n      // const contract = new web3.eth.Contract(ABI, ContractAddress);\n      const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n      const ftn = functionInputs.filter(item => item.name === selectedFunction);\n      console.log('ftn', ftn);\n      switch (selectedMetric) {\n        case 'Latency':\n          if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n            const startTime = performance.now();\n            const response = await contract.methods[selectedFunction](...functionInputValues).call();\n            const endTime = performance.now();\n            const latency = (endTime - startTime) / 1000;\n            console.log(response);\n            console.log('Latency: ', latency);\n          } else {\n            console.log('At latnecy else');\n            // const data = contract.methods[selectedFunction](...functionInputValues).encodeABI();\n            const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n            console.log('Gas', gas);\n            const transactionObject = {\n              from: selectedAccount,\n              gas,\n              gasPrice: '70000000000'\n            };\n            try {\n              const startTime = performance.now();\n              // console.log(contract);\n              // console.log(selectedAccount);\n              const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n              const endTime = performance.now();\n              const latency = (endTime - startTime) / 1000;\n              console.log(receipt);\n              console.log('Latency: ', latency);\n            } catch (error) {\n              console.log(\"Error: \", error);\n            }\n          }\n          break;\n        case 'Throughput':\n          console.log('Input Batch: ', selectedBatch);\n          const promises = [];\n          const nonce = await web3.eth.getTransactionCount(selectedAccount);\n          const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n          for (let i = 0; i < Number(selectedBatch); i++) {\n            if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n              console.log('AT if TPS');\n              promises.push(new Promise(async (resolve, reject) => {\n                try {\n                  const response = await contract.methods[selectedFunction](...functionInputValues).call();\n                  // console.log('TPS response: ', response);\n                  resolve(response);\n                } catch (error) {\n                  reject(error);\n                }\n              }));\n            } else {\n              const transactionObject = {\n                from: selectedAccount,\n                gas,\n                gasPrice: '70000000000',\n                nonce: Number(nonce) + i\n              };\n              promises.push(new Promise(async (resolve, reject) => {\n                try {\n                  const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                  // console.log('TPS response: ', response);\n                  resolve(receipt);\n                } catch (error) {\n                  reject(error);\n                }\n              }));\n            }\n          }\n          const startTime = performance.now();\n          Promise.all(promises).then(receipts => {\n            const endTime = performance.now();\n            const duration = (endTime - startTime) / 1000;\n            const throughput = Number(selectedBatch) / duration;\n            console.log(`Transactions Per Second (TPS): ${throughput}`);\n            console.log(receipts);\n            // resolve({ throughput, receipts });\n          }).catch(error => {\n            console.error('Error:', error);\n            // reject(error);\n          });\n      }\n    }\n  }\n  // Render input boxes based on constructor inputs\n  const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: param.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: param.type,\n      value: inputValues[index] || '',\n      onChange: e => handleInputChange(index, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 9\n  }, this));\n  const jsxContent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [deployed && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select smart contract function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleFunctionChange,\n        value: selectedFunction,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a function\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 25\n        }, this), functionInputs.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter input values for the parameters of the selected function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 21\n      }, this), functionInputs.find(item => item.name === selectedFunction).inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: input.type,\n        placeholder: input.name,\n        value: functionInputValues[index] || '',\n        onChange: event => handlefunctionInputChange(event, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select the performance metric \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleMetricChange,\n        value: selectedMetric,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a metric\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Latency\",\n          children: \"Latency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Throughput\",\n          children: \"Throughput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), selectedMetric === 'Throughput' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select input batch transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleTransactionsChange,\n        value: selectedBatch,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"25\",\n          children: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"50\",\n          children: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Paste your code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"inner\",\n      id: \"large-text\",\n      name: \"large-text\",\n      rows: \"25\",\n      cols: \"70\",\n      value: text,\n      onChange: handleTextAreaChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Or upload the code file here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onFileContent: handleFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compile-button\",\n      onClick: compileContract,\n      children: \" Compile Contract \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deployContract,\n      children: \"Deploy Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 13\n    }, this), jsxContent, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: measureMetrics,\n      children: \"Measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 9\n  }, this);\n}\n_s(TextArea, \"kdPajBddZT3p7zVNnI5T0fzpSo8=\", false, function () {\n  return [useSelector];\n});\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","FileUpload","Demo","useSelector","selectAccount","jsxDEV","_jsxDEV","Fragment","_Fragment","TextArea","_s","text","setText","inputValues","setInputValues","constructorInputs","setConstructorInputs","functionInputs","setFunctionInputs","compiled","setCompiled","deployed","setDeployed","ABI","setABI","ByteCode","setByteCode","ContractAddress","setContractAddress","web3","setWeb3","selectedFunction","setSelectedFunction","functionInputValues","setfunctionInputValues","selectedMetric","setSelectedMetric","selectedBatch","setselectedBatch","account","fileContent","setFileContent","window","ethereum","web3Instance","console","log","error","handleInputChange","index","value","newInputValues","type","Number","handleTextAreaChange","e","target","handleFunctionChange","event","handlefunctionInputChange","handleMetricChange","handleTransactionsChange","handleFileContent","content","compileContract","params","contractName","sourceCode","network","response","get","data","result","abi","alert","bytecode","constructor","find","item","inputs","forEach","param","name","deployContract","api","status","url","API","address","ftns","filter","map","func","stateMutability","message","measureMetrics","ftn","metric","ftnInputs","transactions","perf","selectedAccount","contract","eth","Contract","startTime","performance","now","methods","call","endTime","latency","gas","estimateGas","transactionObject","from","gasPrice","receipt","send","promises","nonce","getTransactionCount","i","push","Promise","resolve","reject","all","then","receipts","duration","throughput","catch","inputBoxes","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","jsxContent","input","className","id","rows","cols","onFileContent","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport Demo from \"./Demo\";\nimport { useSelector } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\n\nfunction TextArea() {\n    // Getting and setting Solidity code from text box\n    const [text, setText] = useState(\"\");\n    // Getting and setting constructor input arguments from input box(es)\n    const [inputValues, setInputValues] = useState([]);\n    // Getting and setting constructor input arguments from ABI\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    // Getting and setting function input arguments from ABI\n    const [functionInputs, setFunctionInputs] = useState([]);\n    // Setting compiled to true if compile-button is pressed\n    const [compiled, setCompiled] = useState(false);\n    // Setting deployed to true if deploy-button is pressed\n    const [deployed, setDeployed] = useState(false);\n    // Getting and setting ABI from compile-button\n    const [ABI, setABI] = useState(\"\");\n    // Getting and setting Bytecode from compile-button\n    const [ByteCode, setByteCode] = useState(\"\");\n    // Getting and setting the contract address from deploy-button\n    const [ContractAddress, setContractAddress] = useState(\"\");\n    // Initializing the web3 object\n    const [web3, setWeb3] = useState(null);\n    // Getting and setting selected function of the deployed contract\n    const [selectedFunction, setSelectedFunction] = useState('');\n    // Getting and setting input parameters of selected function of the deployed contract\n    const [functionInputValues, setfunctionInputValues] = useState([]);\n    // Getting and setting the performance metric for analysis of the deployed contract\n    const [selectedMetric, setSelectedMetric] = useState('');\n    // Getting and setting the input batch transactions for throughput analysis of the deployed contract\n    const [selectedBatch, setselectedBatch] = useState('');\n    // Getting and setting user account from external Web3 provider\n    const account = useSelector(selectAccount);\n    // Getting and setting file content from uploaded file\n    const [fileContent, setFileContent] = useState(null);\n\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        if (constructorInputs[index].type === 'uint256') {\n            console.log('Number');\n            newInputValues[index] = Number(value);\n        }\n        else {\n            console.log(constructorInputs);\n            newInputValues[index] = value;\n        }\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    const handleFunctionChange = (event) => {\n        setSelectedFunction(event.target.value);\n        setfunctionInputValues([]); // Reset input values when the function changes\n    };\n\n    const handlefunctionInputChange = (event, index) => {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = event.target.value;\n        setfunctionInputValues(newInputValues);\n    };\n\n    const handleMetricChange = (event) => {\n        setSelectedMetric(event.target.value);\n    };\n\n    const handleTransactionsChange = (event) => {\n        setselectedBatch(event.target.value);\n    }\n\n    const handleFileContent = (content) => {\n        setFileContent(content);\n    };\n\n    async function compileContract() {\n        if (text || fileContent) {\n            const params = {\n                contractName: 'Storage',\n                sourceCode: text,\n                network: 'Something'\n            };\n            try {\n                console.log(\"At text area\");\n                const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n                console.log(response.data);\n                if (response.data.result.abi) {\n                    window.alert('Compiled successfully');\n                } else {\n                    window.alert(response.data.result);\n                }\n                setByteCode(response.data.result.bytecode);\n                setABI(response.data.result.abi)\n                // Find the constructor in the ABI\n                const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n                if (constructor) {\n                    // Access constructor parameters and their types\n                    const constructorInputs = constructor.inputs || [];\n                    console.log('Constructor Parameters:');\n                    constructorInputs.forEach(param => {\n                        console.log(`Name: ${param.name}, Type: ${param.type}`);\n                    });\n                    setConstructorInputs(constructorInputs);\n                } else {\n                    console.log('No constructor found in the ABI.');\n                }\n                console.log('Constructor Inputs', constructorInputs);\n                setCompiled(true);\n\n                // await sleep(5000);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // console.log('Metamask', account);\n            }\n        }\n        else {\n            window.alert('Please paste or upload the code');\n        }\n    }\n\n    // async function connectToMetaMask() {\n    //     try {\n    //         if (window.ethereum) {\n    //             const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    //             const selectedAccount = accounts[0];\n    //             console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n    //             return selectedAccount;\n    //         } else {\n    //             console.error('MetaMask not detected.');\n    //             return null;\n    //         }\n    //     } catch (error) {\n    //         console.error('Error connecting to MetaMask:', error);\n    //         return null;\n    //     }\n    // }\n\n    // Function to deploy the contract\n    const deployContract = async () => {\n        if (!compiled) {\n            window.alert('Please compile the contract first.');\n            return;\n        }\n        else if (!account) {\n            try {\n                console.log(\"At deploy contracts elif \");\n                const api = {\n                    status: false,\n                    url: '',\n                }\n                const params = {\n                    network: 'Polygon-Mumbai',\n                    API: api,\n                    ABI: Demo,\n                    ByteCode: ByteCode,\n                    inputValues: inputValues\n                };\n                const response = await axios.get('http://10.1.33.124:8000/deploy-contract', { params });\n                console.log(response.data);\n                if (response.data.result.address) {\n                    window.alert(response.data.result.deployed)\n                    // setContractAddress(response.data.result.address);\n                    const ftns = Demo\n                        .filter(item => item.type === 'function')\n                        .map(func => {\n                            return {\n                                name: func.name,\n                                type: func.type,\n                                stateMutability: func.stateMutability,\n                                // params: func.inputs.length,\n                                inputs: func.inputs.map(param => ({\n                                    name: param.name,\n                                    type: param.type,\n                                })),\n                            };\n                        });\n                    setFunctionInputs(ftns);\n                    setContractAddress(response.data.result.address);\n                    setDeployed(true);\n                }\n                else {\n                    window.alert(`Error deploying contract: ${response.data.result.message}`);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // console.log('Metamask', account);\n            }\n        }\n        else {\n            try {\n                // Use Web3.js to create a contract instance\n                // const selectedAccount = await connectToMetaMask();\n                // const contract = new web3.eth.Contract(ABI);\n                // // Deploy the contract\n                // const deployedContract = await contract\n                //     .deploy({\n                //         data: ByteCode,\n                //         arguments: inputValues\n                //     })\n                //     .send({\n                //         from: selectedAccount,\n                //         gas: '5000000', // Adjust the gas limit accordingly\n                //     });\n                // console.log('Contract deployed at:', deployedContract.options.address);\n                // setContractAddress(deployedContract.options.address);\n                // const params = {\n                //     name: 'Something',\n                //     network: 'Polygon Mumbai',\n                //     deployer: selectedAccount,\n                //     address: deployedContract.options.address\n                // };\n                // const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n                // console.log(response.data);\n                const ftns = Demo\n                    .filter(item => item.type === 'function')\n                    .map(func => {\n                        return {\n                            name: func.name,\n                            type: func.type,\n                            stateMutability: func.stateMutability,\n                            // params: func.inputs.length,\n                            inputs: func.inputs.map(param => ({\n                                name: param.name,\n                                type: param.type,\n                            })),\n                        };\n                    });\n                setFunctionInputs(ftns);\n                setDeployed(true);\n            } catch (error) {\n                console.error('Error deploying smart contract:', error);\n            }\n        }\n    };\n\n    async function measureMetrics() {\n        // setDeployed(true);\n        if (!deployed) {\n            window.alert('Deploy the smart contract first')\n        }\n        else if (!account) {\n            try {\n                console.log(\"At measure metrics elif \");\n                const ftn = functionInputs.filter(item => item.name === selectedFunction);\n                const type = ftn[0].stateMutability;\n                const api = {\n                    status: false,\n                    url: '',\n                }\n                const params = {\n                    network: 'Polygon-Mumbai',\n                    API: api,\n                    ABI: Demo,\n                    address: '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4',\n                    metric: selectedMetric,\n                    ftn: selectedFunction,\n                    ftnInputs: functionInputValues,\n                    type: type,\n                    transactions: selectedBatch\n                };\n                const response = await axios.get('http://10.1.33.124:8000/measure-function-call-metrics', { params });\n                console.log(response.data);\n                if (response.data.result.perf) {\n                    window.alert('Measured successfully');\n                } else {\n                    window.alert('Eror during measurments: ', response.data.result.perf);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // console.log('Metamask', account);\n            }\n        }\n        else {\n            console.log(functionInputs);\n            console.log(selectedFunction)\n            console.log('Function Inputs: ', functionInputValues);\n            console.log('Metric: ', selectedMetric);\n            // const selectedAccount = await connectToMetaMask();\n            const selectedAccount = account;\n            // const contract = new web3.eth.Contract(ABI, ContractAddress);\n            const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n            const ftn = functionInputs.filter(item => item.name === selectedFunction);\n            console.log('ftn', ftn);\n            switch (selectedMetric) {\n                case 'Latency':\n                    if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n                        const startTime = performance.now();\n                        const response = await contract.methods[selectedFunction](...functionInputValues).call();\n                        const endTime = performance.now();\n                        const latency = (endTime - startTime) / 1000;\n                        console.log(response);\n                        console.log('Latency: ', latency);\n                    }\n                    else {\n                        console.log('At latnecy else');\n                        // const data = contract.methods[selectedFunction](...functionInputValues).encodeABI();\n                        const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n                        console.log('Gas', gas);\n                        const transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            // console.log(contract);\n                            // console.log(selectedAccount);\n                            const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                            const endTime = performance.now();\n                            const latency = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', latency);\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                    }\n                    break;\n                case 'Throughput':\n                    console.log('Input Batch: ', selectedBatch);\n                    const promises = [];\n                    const nonce = await web3.eth.getTransactionCount(selectedAccount);\n                    const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n                    for (let i = 0; i < Number(selectedBatch); i++) {\n                        if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n                            console.log('AT if TPS');\n                            promises.push(new Promise(async (resolve, reject) => {\n                                try {\n                                    const response = await contract.methods[selectedFunction](...functionInputValues).call();\n                                    // console.log('TPS response: ', response);\n                                    resolve(response);\n                                } catch (error) {\n                                    reject(error);\n                                }\n                            }));\n                        }\n                        else {\n                            const transactionObject = {\n                                from: selectedAccount,\n                                gas,\n                                gasPrice: '70000000000',\n                                nonce: Number(nonce) + i\n                            };\n                            promises.push(new Promise(async (resolve, reject) => {\n                                try {\n                                    const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                                    // console.log('TPS response: ', response);\n                                    resolve(receipt);\n                                } catch (error) {\n                                    reject(error);\n                                }\n                            }));\n                        }\n                    }\n                    const startTime = performance.now();\n                    Promise.all(promises)\n                        .then((receipts) => {\n                            const endTime = performance.now();\n                            const duration = (endTime - startTime) / 1000;\n                            const throughput = Number(selectedBatch) / duration;\n                            console.log(`Transactions Per Second (TPS): ${throughput}`);\n                            console.log(receipts);\n                            // resolve({ throughput, receipts });\n                        })\n                        .catch((error) => {\n                            console.error('Error:', error);\n                            // reject(error);\n                        });\n            }\n        }\n    }\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => (\n        <div key={index}>\n            <label>{param.name}</label>\n            <input\n                type=\"text\"\n                placeholder={param.type}\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(index, e.target.value)}\n            />\n        </div>\n    ));\n\n    const jsxContent = (\n        <div>\n            {deployed && (\n                <>\n                    <h4>Select smart contract function</h4>\n                    <select onChange={handleFunctionChange} value={selectedFunction}>\n                        <option value=\"\">Select a function</option>\n                        {functionInputs.map((item, index) => (\n                            <option key={index} value={item.name}>\n                                {item.name}\n                            </option>\n                        ))}\n                    </select>\n                </>\n            )}\n            {selectedFunction && (\n                <>\n                    <h4>Enter input values for the parameters of the selected function</h4>\n                    {functionInputs\n                        .find((item) => item.name === selectedFunction)\n                        .inputs.map((input, index) => (\n                            <input\n                                key={index}\n                                type={input.type}\n                                placeholder={input.name}\n                                value={functionInputValues[index] || ''}\n                                onChange={(event) => handlefunctionInputChange(event, index)}\n                            />\n                        ))}\n                </>\n            )}\n\n            {selectedFunction && (\n                <>\n                    <h4>Select the performance metric </h4>\n                    <select onChange={handleMetricChange} value={selectedMetric}>\n                        <option value=\"\">Select a metric</option>\n                        <option value=\"Latency\">Latency</option>\n                        <option value=\"Throughput\">Throughput</option>\n                    </select>\n                </>)}\n\n            {selectedMetric === 'Throughput' && (\n                <>\n                    <h4>Select input batch transactions</h4>\n                    <select onChange={handleTransactionsChange} value={selectedBatch}>\n                        <option value=\"\">Select a number</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"25\">25</option>\n                        <option value=\"50\">50</option>\n                    </select>\n                </>\n            )}\n\n        </div>\n    );\n\n    return (\n        <div className=\"text-area\">\n            <h4>Paste your code below:</h4>\n            <textarea\n                className=\"inner\"\n                id=\"large-text\"\n                name=\"large-text\"\n                rows=\"25\"\n                cols=\"70\"\n                value={text}\n                onChange={handleTextAreaChange}\n            ></textarea>\n            <br />\n            <h4>Or upload the code file here:</h4>\n            <FileUpload onFileContent={handleFileContent} />\n            <button className=\"compile-button\" onClick={compileContract}> Compile Contract </button>\n            {inputBoxes}\n            <button onClick={deployContract}>Deploy Contract</button>\n            {jsxContent}\n            <button onClick={measureMetrics}>Measure</button>\n        </div>\n    );\n}\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}