{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport Demo from \"./Demo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  // Getting and setting Solidity code from text box\n  const [text, setText] = useState(\"\");\n  // Getting and setting constructor input arguments from input box(es)\n  const [inputValues, setInputValues] = useState([]);\n  // Getting and setting constructor input arguments from ABI\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  // Getting and setting function input arguments from ABI\n  const [functionInputs, setFunctionInputs] = useState([]);\n  // Setting compiled to true if compile-button is pressed\n  const [compiled, setCompiled] = useState(false);\n  // Setting deployed to true if deploy-button is pressed\n  const [deployed, setDeployed] = useState(false);\n  // Getting and setting ABI from compile-button\n  const [ABI, setABI] = useState(\"\");\n  // Getting and setting Bytecode from compile-button\n  const [ByteCode, setByteCode] = useState(\"\");\n  // Getting and setting the contract address from deploy-button\n  const [ContractAddress, setContractAddress] = useState(\"\");\n  // Initializing the web3 object\n  const [web3, setWeb3] = useState(null);\n  // Getting and setting selected function of the deployed contract\n  const [selectedFunction, setSelectedFunction] = useState('');\n  // Getting and setting input parameters of selected function of the deployed contract\n  const [functionInputValues, setfunctionInputValues] = useState([]);\n  // Getting and setting the performance metric for analysis of the deployed contract\n  const [selectedMetric, setSelectedMetric] = useState('');\n  // Getting and setting the input batch transactions for throughput analysis of the deployed contract\n  const [selectedBatch, setselectedBatch] = useState('');\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    if (constructorInputs[index].type === 'uint256') {\n      console.log('Number');\n      newInputValues[index] = Number(value);\n    } else {\n      console.log(constructorInputs);\n      newInputValues[index] = value;\n    }\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  const handleFunctionChange = event => {\n    setSelectedFunction(event.target.value);\n    setfunctionInputValues([]); // Reset input values when the function changes\n  };\n\n  const handlefunctionInputChange = (event, index) => {\n    const newInputValues = [...inputValues];\n    newInputValues[index] = event.target.value;\n    setfunctionInputValues(newInputValues);\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  const handleTransactionsChange = event => {\n    setselectedBatch(event.target.value);\n  };\n  async function compileContract() {\n    const params = {\n      contractName: 'Storage',\n      sourceCode: text,\n      network: 'Something'\n    };\n    try {\n      console.log(\"At text area\");\n      const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n        params\n      });\n      console.log(response.data);\n      if (response.data.result.abi) {\n        window.alert('Compiled successfully');\n      } else {\n        window.alert(response.data.result);\n      }\n      setByteCode(response.data.result.bytecode);\n      setABI(response.data.result.abi);\n      // Find the constructor in the ABI\n      const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n      if (constructor) {\n        // Access constructor parameters and their types\n        const constructorInputs = constructor.inputs || [];\n        console.log('Constructor Parameters:');\n        constructorInputs.forEach(param => {\n          console.log(`Name: ${param.name}, Type: ${param.type}`);\n        });\n        setConstructorInputs(constructorInputs);\n      } else {\n        console.log('No constructor found in the ABI.');\n      }\n      console.log('Constructor Inputs', constructorInputs);\n      setCompiled(true);\n      // await sleep(5000);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  async function connectToMetaMask() {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const selectedAccount = accounts[0];\n        console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n        return selectedAccount;\n      } else {\n        console.error('MetaMask not detected.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      return null;\n    }\n  }\n\n  // Function to deploy the contract\n  const deployContract = async () => {\n    if (!compiled) {\n      window.alert('Please compile the contract first.');\n      return;\n    } else {\n      try {\n        // Use Web3.js to create a contract instance\n        // const selectedAccount = await connectToMetaMask();\n        // const contract = new web3.eth.Contract(ABI);\n        // // Deploy the contract\n        // const deployedContract = await contract\n        //     .deploy({\n        //         data: ByteCode,\n        //         arguments: inputValues\n        //     })\n        //     .send({\n        //         from: selectedAccount,\n        //         gas: '5000000', // Adjust the gas limit accordingly\n        //     });\n        // console.log('Contract deployed at:', deployedContract.options.address);\n        // setContractAddress(deployedContract.options.address);\n        // const params = {\n        //     name: 'Something',\n        //     network: 'Polygon Mumbai',\n        //     deployer: selectedAccount,\n        //     address: deployedContract.options.address\n        // };\n        // const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n        // console.log(response.data);\n        const ftns = Demo.filter(item => item.type === 'function').map(func => {\n          return {\n            name: func.name,\n            type: func.type,\n            stateMutability: func.stateMutability,\n            // params: func.inputs.length,\n            inputs: func.inputs.map(param => ({\n              name: param.name,\n              type: param.type\n            }))\n          };\n        });\n        setFunctionInputs(ftns);\n        setDeployed(true);\n      } catch (error) {\n        console.error('Error deploying smart contract:', error);\n      }\n    }\n  };\n  async function measureMetrics() {\n    setDeployed(true);\n    if (!deployed) {\n      window.alert('Deploy the smart contract first');\n    } else {\n      console.log(functionInputs);\n      console.log(selectedFunction);\n      console.log('Function Inputs: ', functionInputValues);\n      console.log('Metric: ', selectedMetric);\n      const selectedAccount = await connectToMetaMask();\n      // const contract = new web3.eth.Contract(ABI, ContractAddress);\n      const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n      const dummy = 'retrieve';\n      const ftn = functionInputs.filter(item => item.name === selectedFunction);\n      console.log('ftn', ftn);\n      switch (selectedMetric) {\n        case 'Latency':\n          if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n            const startTime = performance.now();\n            const response = await contract.methods[selectedFunction](Number(...functionInputValues)).call();\n            const endTime = performance.now();\n            const latency = (endTime - startTime) / 1000;\n            console.log(response);\n            console.log('Latency: ', latency);\n          } else {\n            console.log('At latnecy else');\n            // const data = contract.methods[selectedFunction](...functionInputValues).encodeABI();\n            const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n            console.log('Gas', gas);\n            const transactionObject = {\n              from: selectedAccount,\n              gas,\n              gasPrice: '70000000000'\n            };\n            try {\n              const startTime = performance.now();\n              // console.log(contract);\n              // console.log(selectedAccount);\n              const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n              const endTime = performance.now();\n              const latency = (endTime - startTime) / 1000;\n              console.log(receipt);\n              console.log('Latency: ', latency);\n            } catch (error) {\n              console.log(\"Error: \", error);\n            }\n          }\n        case 'Throughput':\n          console.log('Input Batch: ', selectedBatch);\n          const promises = [];\n          for (let i = 0; i < 1; i++) {\n            //Number(selectedBatch)\n            if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n              promises.push(new Promise(async (resolve, reject) => {\n                try {\n                  const response = await contract.methods[selectedFunction](Number(...functionInputValues)).call();\n                  console.log('TPS response: ', response);\n                  resolve(response);\n                } catch (error) {\n                  reject(error);\n                }\n              }));\n            } else {}\n          }\n          const startTime = performance.now();\n          Promise.all(promises).then(receipts => {\n            const endTime = performance.now();\n            const duration = (endTime - startTime) / 1000;\n            const throughput = Number(selectedBatch) / duration;\n            console.log(`Transactions Per Second (TPS): ${throughput}`);\n            console.log(receipts);\n            // resolve({ throughput, receipts });\n          }).catch(error => {\n            console.error('Error:', error);\n            // reject(error);\n          });\n      }\n    }\n  }\n  // Render input boxes based on constructor inputs\n  const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: param.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: param.type,\n      value: inputValues[index] || '',\n      onChange: e => handleInputChange(index, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 9\n  }, this));\n  const jsxContent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Select smart contract function\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleFunctionChange,\n      value: selectedFunction,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), functionInputs.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: item.name,\n        children: item.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter input values for the parameters of the selected function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this), functionInputs.find(item => item.name === selectedFunction).inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: input.type,\n        placeholder: input.name,\n        value: functionInputValues[index] || '',\n        onChange: event => handlefunctionInputChange(event, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Select the performance metric \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleMetricChange,\n      value: selectedMetric,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a metric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Latency\",\n        children: \"Latency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Throughput\",\n        children: \"Throughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), selectedMetric === 'Throughput' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select input batch transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleTransactionsChange,\n        value: selectedBatch,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"25\",\n          children: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"50\",\n          children: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Paste your code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"inner\",\n      id: \"large-text\",\n      name: \"large-text\",\n      rows: \"25\",\n      cols: \"70\",\n      value: text,\n      onChange: handleTextAreaChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Or upload the code file here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compile-button\",\n      onClick: compileContract,\n      children: \" Compile Contract \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deployContract,\n      children: \"Deploy Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }, this), jsxContent, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: measureMetrics,\n      children: \"Measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 9\n  }, this);\n}\n_s(TextArea, \"gQRMhuD1wDx2IYNsWUcAQklWQSc=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","FileUpload","Demo","jsxDEV","_jsxDEV","Fragment","_Fragment","TextArea","_s","text","setText","inputValues","setInputValues","constructorInputs","setConstructorInputs","functionInputs","setFunctionInputs","compiled","setCompiled","deployed","setDeployed","ABI","setABI","ByteCode","setByteCode","ContractAddress","setContractAddress","web3","setWeb3","selectedFunction","setSelectedFunction","functionInputValues","setfunctionInputValues","selectedMetric","setSelectedMetric","selectedBatch","setselectedBatch","window","ethereum","web3Instance","console","log","error","handleInputChange","index","value","newInputValues","type","Number","handleTextAreaChange","e","target","handleFunctionChange","event","handlefunctionInputChange","handleMetricChange","handleTransactionsChange","compileContract","params","contractName","sourceCode","network","response","get","data","result","abi","alert","bytecode","constructor","find","item","inputs","forEach","param","name","connectToMetaMask","accounts","request","method","selectedAccount","deployContract","ftns","filter","map","func","stateMutability","measureMetrics","contract","eth","Contract","dummy","ftn","startTime","performance","now","methods","call","endTime","latency","gas","estimateGas","transactionObject","from","gasPrice","receipt","send","promises","i","push","Promise","resolve","reject","all","then","receipts","duration","throughput","catch","inputBoxes","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","jsxContent","input","className","id","rows","cols","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport Demo from \"./Demo\";\n\nfunction TextArea() {\n    // Getting and setting Solidity code from text box\n    const [text, setText] = useState(\"\");\n    // Getting and setting constructor input arguments from input box(es)\n    const [inputValues, setInputValues] = useState([]);\n    // Getting and setting constructor input arguments from ABI\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    // Getting and setting function input arguments from ABI\n    const [functionInputs, setFunctionInputs] = useState([]);\n    // Setting compiled to true if compile-button is pressed\n    const [compiled, setCompiled] = useState(false);\n    // Setting deployed to true if deploy-button is pressed\n    const [deployed, setDeployed] = useState(false);\n    // Getting and setting ABI from compile-button\n    const [ABI, setABI] = useState(\"\");\n    // Getting and setting Bytecode from compile-button\n    const [ByteCode, setByteCode] = useState(\"\");\n    // Getting and setting the contract address from deploy-button\n    const [ContractAddress, setContractAddress] = useState(\"\");\n    // Initializing the web3 object\n    const [web3, setWeb3] = useState(null);\n    // Getting and setting selected function of the deployed contract\n    const [selectedFunction, setSelectedFunction] = useState('');\n    // Getting and setting input parameters of selected function of the deployed contract\n    const [functionInputValues, setfunctionInputValues] = useState([]);\n    // Getting and setting the performance metric for analysis of the deployed contract\n    const [selectedMetric, setSelectedMetric] = useState('');\n    // Getting and setting the input batch transactions for throughput analysis of the deployed contract\n    const [selectedBatch, setselectedBatch] = useState('');\n\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        if (constructorInputs[index].type === 'uint256') {\n            console.log('Number');\n            newInputValues[index] = Number(value);\n        }\n        else {\n            console.log(constructorInputs);\n            newInputValues[index] = value;\n        }\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    const handleFunctionChange = (event) => {\n        setSelectedFunction(event.target.value);\n        setfunctionInputValues([]); // Reset input values when the function changes\n    };\n\n    const handlefunctionInputChange = (event, index) => {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = event.target.value;\n        setfunctionInputValues(newInputValues);\n    };\n\n    const handleMetricChange = (event) => {\n        setSelectedMetric(event.target.value);\n    };\n\n    const handleTransactionsChange = (event) => {\n        setselectedBatch(event.target.value);\n    }\n\n    async function compileContract() {\n        const params = {\n            contractName: 'Storage',\n            sourceCode: text,\n            network: 'Something'\n        };\n        try {\n            console.log(\"At text area\");\n            const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n            console.log(response.data);\n            if (response.data.result.abi) {\n                window.alert('Compiled successfully');\n            } else {\n                window.alert(response.data.result);\n            }\n            setByteCode(response.data.result.bytecode);\n            setABI(response.data.result.abi)\n            // Find the constructor in the ABI\n            const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n            if (constructor) {\n                // Access constructor parameters and their types\n                const constructorInputs = constructor.inputs || [];\n                console.log('Constructor Parameters:');\n                constructorInputs.forEach(param => {\n                    console.log(`Name: ${param.name}, Type: ${param.type}`);\n                });\n                setConstructorInputs(constructorInputs);\n            } else {\n                console.log('No constructor found in the ABI.');\n            }\n            console.log('Constructor Inputs', constructorInputs);\n            setCompiled(true);\n            // await sleep(5000);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    async function connectToMetaMask() {\n        try {\n            if (window.ethereum) {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                const selectedAccount = accounts[0];\n                console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n                return selectedAccount;\n            } else {\n                console.error('MetaMask not detected.');\n                return null;\n            }\n        } catch (error) {\n            console.error('Error connecting to MetaMask:', error);\n            return null;\n        }\n    }\n\n    // Function to deploy the contract\n    const deployContract = async () => {\n        if (!compiled) {\n            window.alert('Please compile the contract first.');\n            return;\n        }\n        else {\n            try {\n                // Use Web3.js to create a contract instance\n                // const selectedAccount = await connectToMetaMask();\n                // const contract = new web3.eth.Contract(ABI);\n                // // Deploy the contract\n                // const deployedContract = await contract\n                //     .deploy({\n                //         data: ByteCode,\n                //         arguments: inputValues\n                //     })\n                //     .send({\n                //         from: selectedAccount,\n                //         gas: '5000000', // Adjust the gas limit accordingly\n                //     });\n                // console.log('Contract deployed at:', deployedContract.options.address);\n                // setContractAddress(deployedContract.options.address);\n                // const params = {\n                //     name: 'Something',\n                //     network: 'Polygon Mumbai',\n                //     deployer: selectedAccount,\n                //     address: deployedContract.options.address\n                // };\n                // const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n                // console.log(response.data);\n                const ftns = Demo\n                    .filter(item => item.type === 'function')\n                    .map(func => {\n                        return {\n                            name: func.name,\n                            type: func.type,\n                            stateMutability: func.stateMutability,\n                            // params: func.inputs.length,\n                            inputs: func.inputs.map(param => ({\n                                name: param.name,\n                                type: param.type,\n                            })),\n                        };\n                    });\n                setFunctionInputs(ftns);\n                setDeployed(true);\n            } catch (error) {\n                console.error('Error deploying smart contract:', error);\n            }\n        }\n    };\n\n    async function measureMetrics() {\n        setDeployed(true);\n        if (!deployed) {\n            window.alert('Deploy the smart contract first')\n        }\n        else {\n            console.log(functionInputs);\n            console.log(selectedFunction)\n            console.log('Function Inputs: ', functionInputValues);\n            console.log('Metric: ', selectedMetric);\n            const selectedAccount = await connectToMetaMask();\n            // const contract = new web3.eth.Contract(ABI, ContractAddress);\n            const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n            const dummy = 'retrieve';\n            const ftn = functionInputs.filter(item => item.name === selectedFunction);\n            console.log('ftn', ftn);\n            switch (selectedMetric) {\n                case 'Latency':\n                    if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n                        const startTime = performance.now();\n                        const response = await contract.methods[selectedFunction](Number(...functionInputValues)).call();\n                        const endTime = performance.now();\n                        const latency = (endTime - startTime) / 1000;\n                        console.log(response);\n                        console.log('Latency: ', latency);\n                    }\n                    else {\n                        console.log('At latnecy else');\n                        // const data = contract.methods[selectedFunction](...functionInputValues).encodeABI();\n                        const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n                        console.log('Gas', gas);\n                        const transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            // console.log(contract);\n                            // console.log(selectedAccount);\n                            const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                            const endTime = performance.now();\n                            const latency = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', latency);\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                    }\n                case 'Throughput':\n                    console.log('Input Batch: ', selectedBatch);\n                    const promises = [];\n                    for (let i = 0; i < 1; i++) { //Number(selectedBatch)\n                        if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n                            promises.push(new Promise(async (resolve, reject) => {\n                                try {\n                                    const response = await contract.methods[selectedFunction](Number(...functionInputValues)).call();\n                                    console.log('TPS response: ', response);\n                                    resolve(response);\n                                } catch (error) {\n                                    reject(error);\n                                }\n                            }));\n                        }\n                        else {\n\n                        }\n                    }\n                    const startTime = performance.now();\n                    Promise.all(promises)\n                        .then((receipts) => {\n                            const endTime = performance.now();\n                            const duration = (endTime - startTime) / 1000;\n                            const throughput = Number(selectedBatch) / duration;\n                            console.log(`Transactions Per Second (TPS): ${throughput}`);\n                            console.log(receipts);\n                            // resolve({ throughput, receipts });\n                        })\n                        .catch((error) => {\n                            console.error('Error:', error);\n                            // reject(error);\n                        });\n            }\n        }\n    }\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => (\n        <div key={index}>\n            <label>{param.name}</label>\n            <input\n                type=\"text\"\n                placeholder={param.type}\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(index, e.target.value)}\n            />\n        </div>\n    ));\n\n    const jsxContent = (\n        <div>\n            <h4>Select smart contract function</h4>\n            <select onChange={handleFunctionChange} value={selectedFunction}>\n                <option value=\"\">Select a function</option>\n                {functionInputs.map((item, index) => (\n                    <option key={index} value={item.name}>\n                        {item.name}\n                    </option>\n                ))}\n            </select>\n\n            {selectedFunction && (\n                <>\n                    <h4>Enter input values for the parameters of the selected function</h4>\n                    {functionInputs\n                        .find((item) => item.name === selectedFunction)\n                        .inputs.map((input, index) => (\n                            <input\n                                key={index}\n                                type={input.type}\n                                placeholder={input.name}\n                                value={functionInputValues[index] || ''}\n                                onChange={(event) => handlefunctionInputChange(event, index)}\n                            />\n                        ))}\n                </>\n            )}\n\n            <h4>Select the performance metric </h4>\n            <select onChange={handleMetricChange} value={selectedMetric}>\n                <option value=\"\">Select a metric</option>\n                <option value=\"Latency\">Latency</option>\n                <option value=\"Throughput\">Throughput</option>\n            </select>\n\n            {selectedMetric === 'Throughput' && (\n                <>\n                    <h4>Select input batch transactions</h4>\n                    <select onChange={handleTransactionsChange} value={selectedBatch}>\n                        <option value=\"\">Select a number</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"25\">25</option>\n                        <option value=\"50\">50</option>\n                    </select>\n                </>\n            )}\n\n        </div>\n    );\n\n    return (\n        <div className=\"text-area\">\n            <h4>Paste your code below:</h4>\n            <textarea\n                className=\"inner\"\n                id=\"large-text\"\n                name=\"large-text\"\n                rows=\"25\"\n                cols=\"70\"\n                value={text}\n                onChange={handleTextAreaChange}\n            ></textarea>\n            <br />\n            <h4>Or upload the code file here:</h4>\n            <FileUpload></FileUpload>\n            <button className=\"compile-button\" onClick={compileContract}> Compile Contract </button>\n            {inputBoxes}\n            <button onClick={deployContract}>Deploy Contract</button>\n            {jsxContent}\n            <button onClick={measureMetrics}>Measure</button>\n        </div>\n    );\n}\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}