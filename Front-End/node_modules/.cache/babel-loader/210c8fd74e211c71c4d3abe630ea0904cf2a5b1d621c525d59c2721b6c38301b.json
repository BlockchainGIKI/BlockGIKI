{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Custom-Button/Custom-button.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport Ethereum from \"../../Assets/Ethereum.png\";\nimport { setAccount } from \"../../accountSlice\";\nimport './Custom-button.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomButton = ({\n  children\n}) => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState('');\n  const dispatch = useDispatch();\n  async function requestAccount() {\n    if (window.ethereum) {\n      try {\n        // Request access to accounts\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        // Listen for changes to accounts\n        window.ethereum.on('accountsChanged', newAccounts => {\n          if (newAccounts.length > 0) {\n            // Use the first account in the array as the active account\n            setWalletAddress(newAccounts[0]);\n          } else {\n            // Handle the case where no accounts are found\n            alert('No Ethereum accounts found in MetaMask.');\n            setWalletAddress('');\n          }\n        });\n        // Get initial accounts\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n          dispatch(setAccount(accounts[0]));\n        } else {\n          alert('No Ethereum accounts found in MetaMask.');\n        }\n      } catch (error) {\n        console.log('Error connecting to MetaMask:', error);\n      }\n    } else {\n      alert('MetaMask not detected');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Ethereum,\n      alt: \"Ethereum\",\n      className: \"image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 69\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 78\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"custom-button\",\n      onClick: requestAccount,\n      children: [\" \", children, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected account: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(CustomButton, \"UiF/LLzagJAy+kzr9FX0waojfFo=\", false, function () {\n  return [useDispatch];\n});\n_c = CustomButton;\nexport default CustomButton;\nvar _c;\n$RefreshReg$(_c, \"CustomButton\");","map":{"version":3,"names":["React","useState","useDispatch","Ethereum","setAccount","jsxDEV","_jsxDEV","CustomButton","children","_s","walletAddress","setWalletAddress","dispatch","requestAccount","window","ethereum","request","method","on","newAccounts","length","alert","accounts","error","console","log","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Custom-Button/Custom-button.component.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport Ethereum from \"../../Assets/Ethereum.png\";\nimport { setAccount } from \"../../accountSlice\";\nimport './Custom-button.styles.css';\n\nconst CustomButton = ({ children }) => {\n\n    const [walletAddress, setWalletAddress] = useState('');\n    const dispatch = useDispatch();\n\n    async function requestAccount() {\n        if (window.ethereum) {\n            try {\n                // Request access to accounts\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\n                // Listen for changes to accounts\n                window.ethereum.on('accountsChanged', (newAccounts) => {\n                    if (newAccounts.length > 0) {\n                        // Use the first account in the array as the active account\n                        setWalletAddress(newAccounts[0]);\n                    } else {\n                        // Handle the case where no accounts are found\n                        alert('No Ethereum accounts found in MetaMask.');\n                        setWalletAddress('');\n                    }\n                });\n                // Get initial accounts\n                const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n                if (accounts.length > 0) {\n                    setWalletAddress(accounts[0]);\n                    dispatch(setAccount(accounts[0]));\n                } else {\n                    alert('No Ethereum accounts found in MetaMask.');\n                }\n            } catch (error) {\n                console.log('Error connecting to MetaMask:', error);\n            }\n        } else {\n            alert('MetaMask not detected');\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <img src={Ethereum} alt=\"Ethereum\" className=\"image\" /> <br></br><br></br>\n            <button className=\"custom-button\" onClick={requestAccount}> {children} </button>\n            <p>Connected account: {walletAddress}</p>\n        </div>\n    )\n}\n\nexport default CustomButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAEnC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,eAAeW,cAAcA,CAAA,EAAG;IAC5B,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACjB,IAAI;QACA;QACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChE;QACAH,MAAM,CAACC,QAAQ,CAACG,EAAE,CAAC,iBAAiB,EAAGC,WAAW,IAAK;UACnD,IAAIA,WAAW,CAACC,MAAM,GAAG,CAAC,EAAE;YACxB;YACAT,gBAAgB,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC;UACpC,CAAC,MAAM;YACH;YACAE,KAAK,CAAC,yCAAyC,CAAC;YAChDV,gBAAgB,CAAC,EAAE,CAAC;UACxB;QACJ,CAAC,CAAC;QACF;QACA,MAAMW,QAAQ,GAAG,MAAMR,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAe,CAAC,CAAC;QAC1E,IAAIK,QAAQ,CAACF,MAAM,GAAG,CAAC,EAAE;UACrBT,gBAAgB,CAACW,QAAQ,CAAC,CAAC,CAAC,CAAC;UAC7BV,QAAQ,CAACR,UAAU,CAACkB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,MAAM;UACHD,KAAK,CAAC,yCAAyC,CAAC;QACpD;MACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,KAAK,CAAC;MACvD;IACJ,CAAC,MAAM;MACHF,KAAK,CAAC,uBAAuB,CAAC;IAClC;EACJ;EAEA,oBACIf,OAAA;IAAKoB,SAAS,EAAC,MAAM;IAAAlB,QAAA,gBACjBF,OAAA;MAAKqB,GAAG,EAAExB,QAAS;MAACyB,GAAG,EAAC,UAAU;MAACF,SAAS,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eAAA1B,OAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAAA1B,OAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1E1B,OAAA;MAAQoB,SAAS,EAAC,eAAe;MAACO,OAAO,EAAEpB,cAAe;MAAAL,QAAA,GAAC,GAAC,EAACA,QAAQ,EAAC,GAAC;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChF1B,OAAA;MAAAE,QAAA,GAAG,qBAAmB,EAACE,aAAa;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEd,CAAC;AAAAvB,EAAA,CA5CKF,YAAY;EAAA,QAGGL,WAAW;AAAA;AAAAgC,EAAA,GAH1B3B,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}