{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport Demo from \"./Demo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  const {\n    totalSeconds,\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    reset\n  } = useStopwatch();\n\n  // Getting and setting Solidity code from text box\n  const [text, setText] = useState(\"\");\n  // Getting and setting constructor input arguments from input box(es)\n  const [inputValues, setInputValues] = useState([]);\n  // Getting and setting constructor input arguments from ABI\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  // Getting and setting function input arguments from ABI\n  const [functionInputs, setFunctionInputs] = useState([]);\n  // Setting compiled to true if compile-button is pressed\n  const [compiled, setCompiled] = useState(false);\n  // Setting deployed to true if deploy-button is pressed\n  const [deployed, setDeployed] = useState(false);\n  // Getting and setting ABI from compile-button\n  const [ABI, setABI] = useState(\"\");\n  // Getting and setting Bytecode from compile-button\n  const [ByteCode, setByteCode] = useState(\"\");\n  // Getting and setting the contract address from deploy-button\n  const [ContractAddress, setContractAddress] = useState(\"\");\n  // Initializing the web3 object\n  const [web3, setWeb3] = useState(null);\n  // Getting and setting selected function of the deployed contract\n  const [selectedFunction, setSelectedFunction] = useState('');\n  // Getting and setting input parameters of selected function of the deployed contract\n  const [functionInputValues, setfunctionInputValues] = useState([]);\n  // Getting and setting the performance metric for analysis of the deployed contract\n  const [selectedMetric, setSelectedMetric] = useState('');\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    if (constructorInputs[index].type === 'uint256') {\n      console.log('Number');\n      newInputValues[index] = Number(value);\n    } else {\n      console.log(constructorInputs);\n      newInputValues[index] = value;\n    }\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  const handleFunctionChange = event => {\n    setSelectedFunction(event.target.value);\n    setfunctionInputValues([]); // Reset input values when the function changes\n  };\n\n  const handlefunctionInputChange = (event, index) => {\n    const newInputValues = [...inputValues];\n    newInputValues[index] = event.target.value;\n    setfunctionInputValues(newInputValues);\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  async function compileContract() {\n    const params = {\n      contractName: 'Storage',\n      sourceCode: text,\n      network: 'Something'\n    };\n    try {\n      console.log(\"At text area\");\n      const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n        params\n      });\n      console.log(response.data);\n      if (response.data.result.abi) {\n        window.alert('Compiled successfully');\n      } else {\n        window.alert(response.data.result);\n      }\n      setByteCode(response.data.result.bytecode);\n      setABI(response.data.result.abi);\n      // Find the constructor in the ABI\n      const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n      if (constructor) {\n        // Access constructor parameters and their types\n        const constructorInputs = constructor.inputs || [];\n        console.log('Constructor Parameters:');\n        constructorInputs.forEach(param => {\n          console.log(`Name: ${param.name}, Type: ${param.type}`);\n        });\n        setConstructorInputs(constructorInputs);\n      } else {\n        console.log('No constructor found in the ABI.');\n      }\n      console.log('Constructor Inputs', constructorInputs);\n      setCompiled(true);\n      // await sleep(5000);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  async function connectToMetaMask() {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const selectedAccount = accounts[0];\n        console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n        return selectedAccount;\n      } else {\n        console.error('MetaMask not detected.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      return null;\n    }\n  }\n\n  // Function to deploy the contract\n  const deployContract = async () => {\n    if (!compiled) {\n      window.alert('Please compile the contract first.');\n      return;\n    } else {\n      try {\n        // Use Web3.js to create a contract instance\n        const selectedAccount = await connectToMetaMask();\n        const contract = new web3.eth.Contract(ABI);\n        // Deploy the contract\n        const deployedContract = await contract.deploy({\n          data: ByteCode,\n          arguments: inputValues\n        }).send({\n          from: selectedAccount,\n          gas: '5000000' // Adjust the gas limit accordingly\n        });\n\n        console.log('Contract deployed at:', deployedContract.options.address);\n        setContractAddress(deployedContract.options.address);\n        const params = {\n          name: 'Something',\n          network: 'Polygon Mumbai',\n          deployer: selectedAccount,\n          address: deployedContract.options.address\n        };\n        const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', {\n          params\n        });\n        console.log(response.data);\n        const ftns = ABI.filter(item => item.type === 'function').map(func => {\n          return {\n            name: func.name,\n            type: func.type,\n            // params: func.inputs.length,\n            inputs: func.inputs.map(param => ({\n              name: param.name,\n              type: param.type\n            }))\n          };\n        });\n        setFunctionInputs(ftns);\n        setDeployed(true);\n      } catch (error) {\n        console.error('Error deploying smart contract:', error);\n      }\n    }\n  };\n  async function measureMetrics() {\n    setDeployed(true);\n    if (!deployed) {\n      window.alert('Deploy the smart contract first');\n    } else {\n      console.log(selectedFunction);\n      console.log('Function Inputs: ', functionInputValues);\n      console.log('Metric: ', selectedMetric);\n      const selectedAccount = connectToMetaMask();\n      // const contract = new web3.eth.Contract(ABI, ContractAddress);\n      const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n      const transactionObject = {\n        from: selectedAccount,\n        gas: 50000,\n        gasPrice: '700000000000'\n      };\n      // const data = web3.eth.abi.encodeFunctionCall(selectedFunction, functionInputValues);\n      const dummy = 'retrieve';\n      switch (selectedMetric) {\n        case 'Latency':\n          start();\n          const response = await contract.methods[selectedFunction]().call();\n          pause();\n          reset();\n          console.log(response);\n          const latency = totalSeconds;\n          console.log('Latency: ', latency);\n      }\n    }\n  }\n  // Render input boxes based on constructor inputs\n  const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: param.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: param.type,\n      value: inputValues[index] || '',\n      onChange: e => handleInputChange(index, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 9\n  }, this));\n  const jsxContent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dropdown Menu based on Function Names\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleFunctionChange,\n      value: selectedFunction,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), functionInputs.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: item.name,\n        children: item.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Input Boxes based on Function Inputs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this), functionInputs.find(item => item.name === selectedFunction).inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: input.type,\n        placeholder: input.name,\n        value: functionInputValues[index] || '',\n        onChange: event => handlefunctionInputChange(event, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dropdown Menu for Metrics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleMetricChange,\n      value: selectedMetric,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a metric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Latency\",\n        children: \"Latency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Throughput\",\n        children: \"Throughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Paste your code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"inner\",\n      id: \"large-text\",\n      name: \"large-text\",\n      rows: \"25\",\n      cols: \"70\",\n      value: text,\n      onChange: handleTextAreaChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Or upload the code file here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compile-button\",\n      onClick: compileContract,\n      children: \" Compile Contract \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deployContract,\n      children: \"Deploy Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), jsxContent, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: measureMetrics,\n      children: \"Measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 9\n  }, this);\n}\n_s(TextArea, \"v0jhCNpbN2poalQThVuNUC8cKNs=\", false, function () {\n  return [useStopwatch];\n});\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","useStopwatch","FileUpload","Demo","jsxDEV","_jsxDEV","Fragment","_Fragment","TextArea","_s","totalSeconds","seconds","minutes","hours","days","isRunning","start","pause","reset","text","setText","inputValues","setInputValues","constructorInputs","setConstructorInputs","functionInputs","setFunctionInputs","compiled","setCompiled","deployed","setDeployed","ABI","setABI","ByteCode","setByteCode","ContractAddress","setContractAddress","web3","setWeb3","selectedFunction","setSelectedFunction","functionInputValues","setfunctionInputValues","selectedMetric","setSelectedMetric","window","ethereum","web3Instance","console","log","error","handleInputChange","index","value","newInputValues","type","Number","handleTextAreaChange","e","target","handleFunctionChange","event","handlefunctionInputChange","handleMetricChange","compileContract","params","contractName","sourceCode","network","response","get","data","result","abi","alert","bytecode","constructor","find","item","inputs","forEach","param","name","connectToMetaMask","accounts","request","method","selectedAccount","deployContract","contract","eth","Contract","deployedContract","deploy","arguments","send","from","gas","options","address","deployer","ftns","filter","map","func","measureMetrics","transactionObject","gasPrice","dummy","methods","call","latency","inputBoxes","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","jsxContent","input","className","id","rows","cols","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport Demo from \"./Demo\";\n\nfunction TextArea() {\n    const {\n        totalSeconds,\n        seconds,\n        minutes,\n        hours,\n        days,\n        isRunning,\n        start,\n        pause,\n        reset,\n    } = useStopwatch();\n\n    // Getting and setting Solidity code from text box\n    const [text, setText] = useState(\"\");\n    // Getting and setting constructor input arguments from input box(es)\n    const [inputValues, setInputValues] = useState([]);\n    // Getting and setting constructor input arguments from ABI\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    // Getting and setting function input arguments from ABI\n    const [functionInputs, setFunctionInputs] = useState([]);\n    // Setting compiled to true if compile-button is pressed\n    const [compiled, setCompiled] = useState(false);\n    // Setting deployed to true if deploy-button is pressed\n    const [deployed, setDeployed] = useState(false);\n    // Getting and setting ABI from compile-button\n    const [ABI, setABI] = useState(\"\");\n    // Getting and setting Bytecode from compile-button\n    const [ByteCode, setByteCode] = useState(\"\");\n    // Getting and setting the contract address from deploy-button\n    const [ContractAddress, setContractAddress] = useState(\"\");\n    // Initializing the web3 object\n    const [web3, setWeb3] = useState(null);\n    // Getting and setting selected function of the deployed contract\n    const [selectedFunction, setSelectedFunction] = useState('');\n    // Getting and setting input parameters of selected function of the deployed contract\n    const [functionInputValues, setfunctionInputValues] = useState([]);\n    // Getting and setting the performance metric for analysis of the deployed contract\n    const [selectedMetric, setSelectedMetric] = useState('');\n\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        if (constructorInputs[index].type === 'uint256') {\n            console.log('Number');\n            newInputValues[index] = Number(value);\n        }\n        else {\n            console.log(constructorInputs);\n            newInputValues[index] = value;\n        }\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    const handleFunctionChange = (event) => {\n        setSelectedFunction(event.target.value);\n        setfunctionInputValues([]); // Reset input values when the function changes\n    };\n\n    const handlefunctionInputChange = (event, index) => {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = event.target.value;\n        setfunctionInputValues(newInputValues);\n    };\n\n    const handleMetricChange = (event) => {\n        setSelectedMetric(event.target.value);\n    };\n\n    async function compileContract() {\n        const params = {\n            contractName: 'Storage',\n            sourceCode: text,\n            network: 'Something'\n        };\n        try {\n            console.log(\"At text area\");\n            const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n            console.log(response.data);\n            if (response.data.result.abi) {\n                window.alert('Compiled successfully');\n            } else {\n                window.alert(response.data.result);\n            }\n            setByteCode(response.data.result.bytecode);\n            setABI(response.data.result.abi)\n            // Find the constructor in the ABI\n            const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n            if (constructor) {\n                // Access constructor parameters and their types\n                const constructorInputs = constructor.inputs || [];\n                console.log('Constructor Parameters:');\n                constructorInputs.forEach(param => {\n                    console.log(`Name: ${param.name}, Type: ${param.type}`);\n                });\n                setConstructorInputs(constructorInputs);\n            } else {\n                console.log('No constructor found in the ABI.');\n            }\n            console.log('Constructor Inputs', constructorInputs);\n            setCompiled(true);\n            // await sleep(5000);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    async function connectToMetaMask() {\n        try {\n            if (window.ethereum) {\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                const selectedAccount = accounts[0];\n                console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n                return selectedAccount;\n            } else {\n                console.error('MetaMask not detected.');\n                return null;\n            }\n        } catch (error) {\n            console.error('Error connecting to MetaMask:', error);\n            return null;\n        }\n    }\n\n    // Function to deploy the contract\n    const deployContract = async () => {\n        if (!compiled) {\n            window.alert('Please compile the contract first.');\n            return;\n        }\n        else {\n            try {\n                // Use Web3.js to create a contract instance\n                const selectedAccount = await connectToMetaMask();\n                const contract = new web3.eth.Contract(ABI);\n                // Deploy the contract\n                const deployedContract = await contract\n                    .deploy({\n                        data: ByteCode,\n                        arguments: inputValues\n                    })\n                    .send({\n                        from: selectedAccount,\n                        gas: '5000000', // Adjust the gas limit accordingly\n                    });\n                console.log('Contract deployed at:', deployedContract.options.address);\n                setContractAddress(deployedContract.options.address);\n                const params = {\n                    name: 'Something',\n                    network: 'Polygon Mumbai',\n                    deployer: selectedAccount,\n                    address: deployedContract.options.address\n                };\n                const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n                console.log(response.data);\n                const ftns = ABI\n                    .filter(item => item.type === 'function')\n                    .map(func => {\n                        return {\n                            name: func.name,\n                            type: func.type,\n                            // params: func.inputs.length,\n                            inputs: func.inputs.map(param => ({\n                                name: param.name,\n                                type: param.type,\n                            })),\n                        };\n                    });\n                setFunctionInputs(ftns);\n                setDeployed(true);\n            } catch (error) {\n                console.error('Error deploying smart contract:', error);\n            }\n        }\n    };\n\n    async function measureMetrics() {\n        setDeployed(true);\n        if (!deployed) {\n            window.alert('Deploy the smart contract first')\n        }\n        else {\n            console.log(selectedFunction)\n            console.log('Function Inputs: ', functionInputValues);\n            console.log('Metric: ', selectedMetric);\n            const selectedAccount = connectToMetaMask();\n            // const contract = new web3.eth.Contract(ABI, ContractAddress);\n            const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n            const transactionObject = {\n                from: selectedAccount,\n                gas: 50000,\n                gasPrice: '700000000000'\n            };\n            // const data = web3.eth.abi.encodeFunctionCall(selectedFunction, functionInputValues);\n            const dummy = 'retrieve';\n            switch (selectedMetric) {\n                case 'Latency':\n                    start();\n                    const response = await contract.methods[selectedFunction]().call();\n                    pause();\n                    reset();\n                    console.log(response);\n                    const latency = totalSeconds;\n                    console.log('Latency: ', latency);\n            }\n        }\n    }\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => (\n        <div key={index}>\n            <label>{param.name}</label>\n            <input\n                type=\"text\"\n                placeholder={param.type}\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(index, e.target.value)}\n            />\n        </div>\n    ));\n\n    const jsxContent = (\n        <div>\n            <h2>Dropdown Menu based on Function Names</h2>\n            <select onChange={handleFunctionChange} value={selectedFunction}>\n                <option value=\"\">Select a function</option>\n                {functionInputs.map((item, index) => (\n                    <option key={index} value={item.name}>\n                        {item.name}\n                    </option>\n                ))}\n            </select>\n\n            {selectedFunction && (\n                <>\n                    <h2>Input Boxes based on Function Inputs</h2>\n                    {functionInputs\n                        .find((item) => item.name === selectedFunction)\n                        .inputs.map((input, index) => (\n                            <input\n                                key={index}\n                                type={input.type}\n                                placeholder={input.name}\n                                value={functionInputValues[index] || ''}\n                                onChange={(event) => handlefunctionInputChange(event, index)}\n                            />\n                        ))}\n                </>\n            )}\n\n            <h2>Dropdown Menu for Metrics</h2>\n            <select onChange={handleMetricChange} value={selectedMetric}>\n                <option value=\"\">Select a metric</option>\n                <option value=\"Latency\">Latency</option>\n                <option value=\"Throughput\">Throughput</option>\n            </select>\n        </div>\n    );\n\n    return (\n        <div className=\"text-area\">\n            <h4>Paste your code below:</h4>\n            <textarea\n                className=\"inner\"\n                id=\"large-text\"\n                name=\"large-text\"\n                rows=\"25\"\n                cols=\"70\"\n                value={text}\n                onChange={handleTextAreaChange}\n            ></textarea>\n            <br />\n            <h4>Or upload the code file here:</h4>\n            <FileUpload></FileUpload>\n            <button className=\"compile-button\" onClick={compileContract}> Compile Contract </button>\n            {inputBoxes}\n            <button onClick={deployContract}>Deploy Contract</button>\n            {jsxContent}\n            <button onClick={measureMetrics}>Measure</button>\n        </div>\n    );\n}\n\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}