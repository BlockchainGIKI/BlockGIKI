{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\n// import Demo from \"./Demo\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { setChange } from \"../../changeSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  const dispatch = useDispatch();\n  // Getting and setting Solidity code from text box\n  const [text, setText] = useState(\"\");\n  const [ABItext, setABIText] = useState(\"\");\n  // Getting and setting constructor input arguments from input box(es)\n  const [inputValues, setInputValues] = useState([]);\n  // Getting and setting constructor input arguments from ABI\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  // Getting and setting function input arguments from ABI\n  const [functionInputs, setFunctionInputs] = useState([]);\n  // Setting compiled to true if compile-button is pressed\n  const [compiled, setCompiled] = useState(false);\n  // Setting deployed to true if deploy-button is pressed\n  const [deployed, setDeployed] = useState(false);\n  // Getting and setting ABI from compile-button\n  const [ABI, setABI] = useState(\"\");\n  // Getting and setting Bytecode from compile-button\n  const [ByteCode, setByteCode] = useState(\"\");\n  // Getting and setting the contract address from deploy-button\n  const [ContractAddress, setContractAddress] = useState(\"\");\n  // Initializing the web3 object\n  const [web3, setWeb3] = useState(null);\n  // Getting and setting selected function of the deployed contract\n  const [selectedFunction, setSelectedFunction] = useState('');\n  // Getting and setting input parameters of selected function of the deployed contract\n  const [functionInputValues, setfunctionInputValues] = useState([]);\n  // Getting and setting the performance metric for analysis of the deployed contract\n  const [selectedMetric, setSelectedMetric] = useState('');\n  // Getting and setting the input batch transactions for throughput analysis of the deployed contract\n  const [selectedBatch, setselectedBatch] = useState('');\n  // Getting and setting user account from external Web3 provider\n  const account = useSelector(selectAccount);\n  // Getting and setting file content from uploaded file\n  const [fileContent, setFileContent] = useState(null);\n  // Getting and settin the contract name from the user\n  const [contractName, setContractName] = useState(null);\n  // Getting and setting the network from the user\n  const [selectedBlockchain, setSelectedBlockchain] = useState('');\n  // \n  const [add, setAdd] = useState(null);\n  //\n  const [addState, setAddState] = useState(false);\n  useEffect(() => {\n    // Check if Web3 is available\n    if (window.ethereum) {\n      // Use MetaMask's provider\n      const web3Instance = new Web3(window.ethereum);\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n    } else {\n      console.error('MetaMask not detected. Please install MetaMask.');\n    }\n  }, []);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    if (constructorInputs[index].type === 'uint256') {\n      console.log('Number');\n      newInputValues[index] = Number(value);\n    } else {\n      console.log(constructorInputs);\n      newInputValues[index] = value;\n    }\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  const handleABIAreaChange = async e => {\n    setABIText(e.target.value);\n    try {\n      const ob = JSON.parse(e.target.value);\n      console.log(typeof ob, ob);\n      setABI(ob);\n      setAddState(true);\n      const ftns = ob.filter(item => item.type === 'function').map(func => {\n        return {\n          name: func.name,\n          type: func.type,\n          stateMutability: func.stateMutability,\n          // params: func.inputs.length,\n          inputs: func.inputs.map(param => ({\n            name: param.name,\n            type: param.type\n          }))\n        };\n      });\n      setFunctionInputs(ftns);\n    } catch (error) {\n      return;\n    }\n  };\n  const handleFunctionChange = event => {\n    setSelectedFunction(event.target.value);\n    setfunctionInputValues([]); // Reset input values when the function changes\n  };\n\n  const handlefunctionInputChange = (event, index) => {\n    const newInputValues = [...inputValues];\n    newInputValues[index] = event.target.value;\n    setfunctionInputValues(newInputValues);\n  };\n  const handleMetricChange = event => {\n    setSelectedMetric(event.target.value);\n  };\n  const handleTransactionsChange = event => {\n    setselectedBatch(event.target.value);\n  };\n  const handleFileContent = content => {\n    setFileContent(content);\n  };\n  const handleContractNameChange = e => {\n    setContractName(e.target.value);\n  };\n  const handleContractAddressChange = e => {\n    setContractAddress(e.target.value);\n  };\n  const handleBlockchainChange = e => {\n    setSelectedBlockchain(e.target.value);\n  };\n  async function compileContract() {\n    if (text || fileContent) {\n      const params = {\n        contractName: contractName,\n        sourceCode: text || fileContent,\n        network: selectedBlockchain\n      };\n      try {\n        console.log(\"At text area\");\n        console.log(contractName);\n        console.log(selectedBlockchain);\n        const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n          params\n        });\n        console.log(response.data);\n        if (response.data.result.abi) {\n          window.alert('Compiled successfully');\n        } else {\n          window.alert(response.data.result);\n        }\n        setByteCode(response.data.result.bytecode);\n        setABI(response.data.result.abi);\n        // Find the constructor in the ABI\n        const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n        if (constructor) {\n          // Access constructor parameters and their types\n          const constructorInputs = constructor.inputs || [];\n          console.log('Constructor Parameters:');\n          constructorInputs.forEach(param => {\n            console.log(`Name: ${param.name}, Type: ${param.type}`);\n          });\n          setConstructorInputs(constructorInputs);\n        } else {\n          console.log('No constructor found in the ABI.');\n        }\n        console.log('Constructor Inputs', constructorInputs);\n        setCompiled(true);\n\n        // await sleep(5000);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // console.log('Metamask', account);\n      }\n    } else {\n      window.alert('Please paste or upload the code');\n    }\n  }\n\n  // async function connectToMetaMask() {\n  //     try {\n  //         if (window.ethereum) {\n  //             const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  //             const selectedAccount = accounts[0];\n  //             console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n  //             return selectedAccount;\n  //         } else {\n  //             console.error('MetaMask not detected.');\n  //             return null;\n  //         }\n  //     } catch (error) {\n  //         console.error('Error connecting to MetaMask:', error);\n  //         return null;\n  //     }\n  // }\n\n  // Function to deploy the contract\n  const deployContract = async () => {\n    if (!compiled) {\n      window.alert('Please compile the contract first.');\n      return;\n    } else if (!account) {\n      try {\n        console.log(\"At deploy contracts elif \");\n        const api = {\n          status: false,\n          url: ''\n        };\n        const params = {\n          network: 'Polygon-Mumbai',\n          API: api,\n          ABI: ABI,\n          ByteCode: ByteCode,\n          inputValues: inputValues\n        };\n        const response = await axios.get('http://10.1.33.124:8000/deploy-contract', {\n          params\n        });\n        console.log(response.data);\n        if (response.data.result.address) {\n          window.alert(response.data.result.deployed);\n          setContractAddress(response.data.result.address);\n          const ftns = ABI.filter(item => item.type === 'function').map(func => {\n            return {\n              name: func.name,\n              type: func.type,\n              stateMutability: func.stateMutability,\n              // params: func.inputs.length,\n              inputs: func.inputs.map(param => ({\n                name: param.name,\n                type: param.type\n              }))\n            };\n          });\n          setFunctionInputs(ftns);\n          //     setContractAddress(response.data.result.address);\n          setDeployed(true);\n        } else {\n          window.alert(`Error deploying contract: ${response.data.result.message}`);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // console.log('Metamask', account);\n      }\n    } else {\n      try {\n        // Use Web3.js to create a contract instance\n        const contract = new web3.eth.Contract(ABI);\n        // Deploy the contract\n        const deployedContract = await contract.deploy({\n          data: ByteCode,\n          arguments: inputValues\n        }).send({\n          from: account,\n          gas: '5000000'\n        });\n        console.log('Contract deployed at:', deployedContract.options.address);\n        setContractAddress(deployedContract.options.address);\n        const params = {\n          name: contractName,\n          network: selectedBlockchain,\n          deployer: account,\n          address: deployedContract.options.address\n        };\n        const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', {\n          params\n        });\n        console.log(response.data);\n        const ftns = ABI.filter(item => item.type === 'function').map(func => {\n          return {\n            name: func.name,\n            type: func.type,\n            stateMutability: func.stateMutability,\n            // params: func.inputs.length,\n            inputs: func.inputs.map(param => ({\n              name: param.name,\n              type: param.type\n            }))\n          };\n        });\n        setFunctionInputs(ftns);\n        setDeployed(true);\n      } catch (error) {\n        console.error('Error deploying smart contract:', error);\n      }\n    }\n  };\n  async function measureMetrics() {\n    // setDeployed(true);\n    console.log('addState: ', addState);\n    if (!(deployed || addState)) {\n      window.alert('Deploy the smart contract first');\n    } else if (!account) {\n      try {\n        console.log(\"At measure metrics elif \");\n        const ftn = functionInputs.filter(item => item.name === selectedFunction);\n        const type = ftn[0].stateMutability;\n        const api = {\n          status: false,\n          url: ''\n        };\n        const params = {\n          network: 'Polygon-Mumbai',\n          API: api,\n          ABI: ABItext,\n          address: ContractAddress,\n          metric: selectedMetric,\n          ftn: selectedFunction,\n          ftnInputs: functionInputValues,\n          type: type,\n          transactions: selectedBatch\n        };\n        const response = await axios.get('http://10.1.33.124:8000/measure-function-call-metrics', {\n          params\n        });\n        console.log(response.data);\n        if (response.data.result.perf) {\n          window.alert('Measured successfully');\n          const date = new Date();\n          const params = {\n            address: '0x5719D02a5ebe5cA3AE722c703c24Ae5C845d0538',\n            date: date.toLocaleDateString(),\n            time: date.toTimeString(),\n            network: selectedBlockchain,\n            contract: contractName,\n            metric: selectedMetric,\n            ftn: selectedFunction,\n            value: response.data.result.perf,\n            fee: response.data.result.fee,\n            tx: selectedMetric === 'Latency' ? 0 : selectedBatch\n          };\n          console.log(params);\n          try {\n            const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', {\n              params\n            });\n            console.log(resp.data);\n            dispatch(setChange(true));\n          } catch (error) {\n            console.error('Error fetching data:', error);\n          }\n        } else {\n          window.alert('Eror during measurments: ', response.data.result.perf);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // console.log('Metamask', account);\n      }\n    } else {\n      console.log(functionInputs);\n      console.log(selectedFunction);\n      console.log('Function Inputs: ', functionInputValues);\n      console.log('Metric: ', selectedMetric);\n      // const selectedAccount = await connectToMetaMask();\n      const selectedAccount = account;\n      const contract = new web3.eth.Contract(ABI, ContractAddress);\n      // const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n      const ftn = functionInputs.filter(item => item.name === selectedFunction);\n      console.log('ftn', ftn);\n      switch (selectedMetric) {\n        case 'Latency':\n          if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n            try {\n              const startTime = performance.now();\n              const response = await contract.methods[selectedFunction](...functionInputValues).call();\n              const endTime = performance.now();\n              const latency = (endTime - startTime) / 1000;\n              console.log(response);\n              console.log('Latency: ', latency);\n              const date = new Date();\n              const params = {\n                address: account,\n                date: date.toLocaleDateString(),\n                time: date.toTimeString(),\n                network: selectedBlockchain,\n                contract: contractName,\n                metric: selectedMetric,\n                ftn: selectedFunction,\n                value: latency,\n                fee: 0,\n                tx: 0\n              };\n              console.log(params);\n              const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', {\n                params\n              });\n              console.log(resp.data);\n              dispatch(setChange(true));\n            } catch (error) {\n              console.error('Error:', error);\n            }\n          } else {\n            console.log('At latnecy else');\n            // const data = contract.methods[selectedFunction](...functionInputValues).encodeABI();\n            const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n            console.log('Gas', gas);\n            const transactionObject = {\n              from: selectedAccount,\n              gas,\n              gasPrice: '70000000000'\n            };\n            try {\n              const startTime = performance.now();\n              // console.log(contract);\n              // console.log(selectedAccount);\n              const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n              const endTime = performance.now();\n              const latency = (endTime - startTime) / 1000;\n              console.log(receipt);\n              const txFee = Number(receipt.effectiveGasPrice) * Number(receipt.gasUsed) / 1e18;\n              console.log('Latency: ', latency);\n              const date = new Date();\n              const params = {\n                address: account,\n                date: date.toLocaleDateString(),\n                time: date.toTimeString(),\n                network: selectedBlockchain,\n                contract: contractName,\n                metric: selectedMetric,\n                ftn: selectedFunction,\n                value: latency,\n                fee: txFee,\n                tx: 0\n              };\n              console.log(params);\n              const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', {\n                params\n              });\n              console.log(resp.data);\n              dispatch(setChange(true));\n            } catch (error) {\n              console.log(\"Error: \", error);\n            }\n          }\n          break;\n        case 'Throughput':\n          console.log('Input Batch: ', selectedBatch);\n          const promises = [];\n          const nonce = await web3.eth.getTransactionCount(selectedAccount);\n          const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n          for (let i = 0; i < Number(selectedBatch); i++) {\n            if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n              console.log('AT if TPS');\n              promises.push(new Promise(async (resolve, reject) => {\n                try {\n                  const response = await contract.methods[selectedFunction](...functionInputValues).call();\n                  // console.log('TPS response: ', response);\n                  resolve(response);\n                } catch (error) {\n                  reject(error);\n                }\n              }));\n            } else {\n              const transactionObject = {\n                from: selectedAccount,\n                gas,\n                gasPrice: '70000000000',\n                nonce: Number(nonce) + i\n              };\n              promises.push(new Promise(async (resolve, reject) => {\n                try {\n                  const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                  // console.log('TPS response: ', response);\n                  resolve(receipt);\n                } catch (error) {\n                  reject(error);\n                }\n              }));\n            }\n          }\n          const startTime = performance.now();\n          Promise.all(promises).then(async receipts => {\n            const endTime = performance.now();\n            const duration = (endTime - startTime) / 1000;\n            const throughput = Number(selectedBatch) / duration;\n            console.log(`Transactions Per Second (TPS): ${throughput}`);\n            console.log(receipts);\n            let txFee = 0;\n            for (let i = 0; i < selectedBatch; i++) {\n              txFee += Number(receipts[i].effectiveGasPrice) * Number(receipts[i].gasUsed);\n            }\n            txFee = txFee / selectedBatch / 1e18;\n            const date = new Date();\n            const params = {\n              address: account,\n              date: date.toLocaleDateString(),\n              time: date.toTimeString(),\n              network: selectedBlockchain,\n              contract: contractName,\n              metric: selectedMetric,\n              ftn: selectedFunction,\n              value: throughput,\n              fee: ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view' ? 0 : txFee,\n              tx: selectedBatch\n            };\n            console.log(params);\n            const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', {\n              params\n            });\n            console.log(resp.data);\n            dispatch(setChange(true));\n            // resolve({ throughput, receipts });\n          }).catch(error => {\n            console.error('Error:', error);\n            // reject(error);\n          });\n\n        default:\n          return;\n      }\n    }\n  }\n\n  // Render input boxes based on constructor inputs\n  const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: param.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: param.type,\n      value: inputValues[index] || '',\n      onChange: e => handleInputChange(index, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 534,\n    columnNumber: 9\n  }, this));\n  const jsxContent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [(deployed || addState) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select smart contract function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleFunctionChange,\n        value: selectedFunction,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a function\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 25\n        }, this), functionInputs.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter input values for the parameters of the selected function\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 21\n      }, this), functionInputs.find(item => item.name === selectedFunction).inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: input.type,\n        placeholder: input.name,\n        value: functionInputValues[index] || '',\n        onChange: event => handlefunctionInputChange(event, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true), selectedFunction && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select the performance metric \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleMetricChange,\n        value: selectedMetric,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a metric\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Latency\",\n          children: \"Latency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Throughput\",\n          children: \"Throughput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), selectedMetric === 'Throughput' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select input batch transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleTransactionsChange,\n        value: selectedBatch,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"25\",\n          children: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"50\",\n          children: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 546,\n    columnNumber: 9\n  }, this);\n  const addContent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: add && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter smart contract address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        value: ContractAddress,\n        onChange: handleContractAddressChange,\n        placeholder: \"Smart contract address\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Paste contract ABI below:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"inner_ABI\",\n        id: \"large-text-ABI\",\n        name: \"large-text-ABI\",\n        rows: \"25\",\n        cols: \"70\",\n        value: ABItext,\n        onChange: handleABIAreaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 603,\n    columnNumber: 9\n  }, this);\n  function addContract() {\n    setAdd(true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Enter smart contract name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"endPoint\",\n      value: contractName,\n      onChange: handleContractNameChange,\n      placeholder: \"Smart contract name\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select a Blockchain: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedBlockchain,\n      onChange: handleBlockchainChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select blockchain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Arbitum-Goerli\",\n        children: \"Arbitum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Celo\",\n        children: \"Alfajores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Linea-Goerli\",\n        children: \"Linea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Optimism-Goerli\",\n        children: \"Optimism\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Polygon-Mumbai\",\n        children: \"Mumbai\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Sepolia\",\n        children: \"Sepolia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"All\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Paste your code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"inner\",\n      id: \"large-text\",\n      name: \"large-text\",\n      rows: \"25\",\n      cols: \"70\",\n      value: text,\n      onChange: handleTextAreaChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Or upload the code file here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onFileContent: handleFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compile-button\",\n      onClick: compileContract,\n      children: \" Compile Contract \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 13\n    }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deployContract,\n      children: \"Deploy Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addContract,\n      children: \"Add Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 13\n    }, this), addContent, jsxContent, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: measureMetrics,\n      children: \"Measure\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 637,\n    columnNumber: 9\n  }, this);\n}\n_s(TextArea, \"EDNetl/LfxwL+D+AmrvQlTX4fcw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Web3","FileUpload","useSelector","useDispatch","selectAccount","setChange","jsxDEV","_jsxDEV","Fragment","_Fragment","TextArea","_s","dispatch","text","setText","ABItext","setABIText","inputValues","setInputValues","constructorInputs","setConstructorInputs","functionInputs","setFunctionInputs","compiled","setCompiled","deployed","setDeployed","ABI","setABI","ByteCode","setByteCode","ContractAddress","setContractAddress","web3","setWeb3","selectedFunction","setSelectedFunction","functionInputValues","setfunctionInputValues","selectedMetric","setSelectedMetric","selectedBatch","setselectedBatch","account","fileContent","setFileContent","contractName","setContractName","selectedBlockchain","setSelectedBlockchain","add","setAdd","addState","setAddState","window","ethereum","web3Instance","console","log","error","handleInputChange","index","value","newInputValues","type","Number","handleTextAreaChange","e","target","handleABIAreaChange","ob","JSON","parse","ftns","filter","item","map","func","name","stateMutability","inputs","param","handleFunctionChange","event","handlefunctionInputChange","handleMetricChange","handleTransactionsChange","handleFileContent","content","handleContractNameChange","handleContractAddressChange","handleBlockchainChange","compileContract","params","sourceCode","network","response","get","data","result","abi","alert","bytecode","constructor","find","forEach","deployContract","api","status","url","API","address","message","contract","eth","Contract","deployedContract","deploy","arguments","send","from","gas","options","deployer","measureMetrics","ftn","metric","ftnInputs","transactions","perf","date","Date","toLocaleDateString","time","toTimeString","fee","tx","resp","selectedAccount","startTime","performance","now","methods","call","endTime","latency","estimateGas","transactionObject","gasPrice","receipt","txFee","effectiveGasPrice","gasUsed","promises","nonce","getTransactionCount","i","push","Promise","resolve","reject","all","then","receipts","duration","throughput","catch","inputBoxes","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","jsxContent","input","addContent","required","className","id","rows","cols","addContract","onFileContent","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Web3 from \"web3\";\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\n// import Demo from \"./Demo\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { setChange } from \"../../changeSlice\";\n\nfunction TextArea() {\n    const dispatch = useDispatch();\n    // Getting and setting Solidity code from text box\n    const [text, setText] = useState(\"\");\n    const [ABItext, setABIText] = useState(\"\");\n    // Getting and setting constructor input arguments from input box(es)\n    const [inputValues, setInputValues] = useState([]);\n    // Getting and setting constructor input arguments from ABI\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    // Getting and setting function input arguments from ABI\n    const [functionInputs, setFunctionInputs] = useState([]);\n    // Setting compiled to true if compile-button is pressed\n    const [compiled, setCompiled] = useState(false);\n    // Setting deployed to true if deploy-button is pressed\n    const [deployed, setDeployed] = useState(false);\n    // Getting and setting ABI from compile-button\n    const [ABI, setABI] = useState(\"\");\n    // Getting and setting Bytecode from compile-button\n    const [ByteCode, setByteCode] = useState(\"\");\n    // Getting and setting the contract address from deploy-button\n    const [ContractAddress, setContractAddress] = useState(\"\");\n    // Initializing the web3 object\n    const [web3, setWeb3] = useState(null);\n    // Getting and setting selected function of the deployed contract\n    const [selectedFunction, setSelectedFunction] = useState('');\n    // Getting and setting input parameters of selected function of the deployed contract\n    const [functionInputValues, setfunctionInputValues] = useState([]);\n    // Getting and setting the performance metric for analysis of the deployed contract\n    const [selectedMetric, setSelectedMetric] = useState('');\n    // Getting and setting the input batch transactions for throughput analysis of the deployed contract\n    const [selectedBatch, setselectedBatch] = useState('');\n    // Getting and setting user account from external Web3 provider\n    const account = useSelector(selectAccount);\n    // Getting and setting file content from uploaded file\n    const [fileContent, setFileContent] = useState(null);\n    // Getting and settin the contract name from the user\n    const [contractName, setContractName] = useState(null);\n    // Getting and setting the network from the user\n    const [selectedBlockchain, setSelectedBlockchain] = useState('');\n    // \n    const [add, setAdd] = useState(null);\n    //\n    const [addState, setAddState] = useState(false);\n\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        if (constructorInputs[index].type === 'uint256') {\n            console.log('Number');\n            newInputValues[index] = Number(value);\n        }\n        else {\n            console.log(constructorInputs);\n            newInputValues[index] = value;\n        }\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    const handleABIAreaChange = async (e) => {\n        setABIText(e.target.value);\n        try {\n            const ob = JSON.parse(e.target.value);\n            console.log(typeof (ob), ob);\n            setABI(ob);\n            setAddState(true);\n            const ftns = ob\n                .filter(item => item.type === 'function')\n                .map(func => {\n                    return {\n                        name: func.name,\n                        type: func.type,\n                        stateMutability: func.stateMutability,\n                        // params: func.inputs.length,\n                        inputs: func.inputs.map(param => ({\n                            name: param.name,\n                            type: param.type,\n                        })),\n                    };\n                });\n            setFunctionInputs(ftns);\n        }\n        catch (error) {\n            return;\n        }\n    };\n\n    const handleFunctionChange = (event) => {\n        setSelectedFunction(event.target.value);\n        setfunctionInputValues([]); // Reset input values when the function changes\n    };\n\n    const handlefunctionInputChange = (event, index) => {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = event.target.value;\n        setfunctionInputValues(newInputValues);\n    };\n\n    const handleMetricChange = (event) => {\n        setSelectedMetric(event.target.value);\n    };\n\n    const handleTransactionsChange = (event) => {\n        setselectedBatch(event.target.value);\n    }\n\n    const handleFileContent = (content) => {\n        setFileContent(content);\n    };\n\n    const handleContractNameChange = (e) => {\n        setContractName(e.target.value)\n    }\n\n    const handleContractAddressChange = (e) => {\n        setContractAddress(e.target.value)\n    }\n\n    const handleBlockchainChange = (e) => {\n        setSelectedBlockchain(e.target.value);\n    };\n\n    async function compileContract() {\n        if (text || fileContent) {\n            const params = {\n                contractName: contractName,\n                sourceCode: text || fileContent,\n                network: selectedBlockchain\n            };\n            try {\n                console.log(\"At text area\");\n                console.log(contractName);\n                console.log(selectedBlockchain);\n                const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n                console.log(response.data);\n                if (response.data.result.abi) {\n                    window.alert('Compiled successfully');\n                } else {\n                    window.alert(response.data.result);\n                }\n                setByteCode(response.data.result.bytecode);\n                setABI(response.data.result.abi)\n                // Find the constructor in the ABI\n                const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n                if (constructor) {\n                    // Access constructor parameters and their types\n                    const constructorInputs = constructor.inputs || [];\n                    console.log('Constructor Parameters:');\n                    constructorInputs.forEach(param => {\n                        console.log(`Name: ${param.name}, Type: ${param.type}`);\n                    });\n                    setConstructorInputs(constructorInputs);\n                } else {\n                    console.log('No constructor found in the ABI.');\n                }\n                console.log('Constructor Inputs', constructorInputs);\n                setCompiled(true);\n\n                // await sleep(5000);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // console.log('Metamask', account);\n            }\n        }\n        else {\n            window.alert('Please paste or upload the code');\n        }\n    }\n\n    // async function connectToMetaMask() {\n    //     try {\n    //         if (window.ethereum) {\n    //             const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    //             const selectedAccount = accounts[0];\n    //             console.log('Connected to MetaMask. Selected Account:', selectedAccount);\n    //             return selectedAccount;\n    //         } else {\n    //             console.error('MetaMask not detected.');\n    //             return null;\n    //         }\n    //     } catch (error) {\n    //         console.error('Error connecting to MetaMask:', error);\n    //         return null;\n    //     }\n    // }\n\n    // Function to deploy the contract\n    const deployContract = async () => {\n        if (!compiled) {\n            window.alert('Please compile the contract first.');\n            return;\n        }\n        else if (!account) {\n            try {\n                console.log(\"At deploy contracts elif \");\n                const api = {\n                    status: false,\n                    url: '',\n                }\n                const params = {\n                    network: 'Polygon-Mumbai',\n                    API: api,\n                    ABI: ABI,\n                    ByteCode: ByteCode,\n                    inputValues: inputValues\n                };\n                const response = await axios.get('http://10.1.33.124:8000/deploy-contract', { params });\n                console.log(response.data);\n                if (response.data.result.address) {\n                    window.alert(response.data.result.deployed)\n                    setContractAddress(response.data.result.address);\n                    const ftns = ABI\n                        .filter(item => item.type === 'function')\n                        .map(func => {\n                            return {\n                                name: func.name,\n                                type: func.type,\n                                stateMutability: func.stateMutability,\n                                // params: func.inputs.length,\n                                inputs: func.inputs.map(param => ({\n                                    name: param.name,\n                                    type: param.type,\n                                })),\n                            };\n                        });\n                    setFunctionInputs(ftns);\n                    //     setContractAddress(response.data.result.address);\n                    setDeployed(true);\n                }\n                else {\n                    window.alert(`Error deploying contract: ${response.data.result.message}`);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // console.log('Metamask', account);\n            }\n        }\n        else {\n            try {\n                // Use Web3.js to create a contract instance\n                const contract = new web3.eth.Contract(ABI);\n                // Deploy the contract\n                const deployedContract = await contract\n                    .deploy({\n                        data: ByteCode,\n                        arguments: inputValues\n                    })\n                    .send({\n                        from: account,\n                        gas: '5000000',\n                    });\n                console.log('Contract deployed at:', deployedContract.options.address);\n                setContractAddress(deployedContract.options.address);\n                const params = {\n                    name: contractName,\n                    network: selectedBlockchain,\n                    deployer: account,\n                    address: deployedContract.options.address\n                };\n                const response = await axios.get('http://10.1.33.124:8000/write-to-contract-csv', { params });\n                console.log(response.data);\n                const ftns = ABI\n                    .filter(item => item.type === 'function')\n                    .map(func => {\n                        return {\n                            name: func.name,\n                            type: func.type,\n                            stateMutability: func.stateMutability,\n                            // params: func.inputs.length,\n                            inputs: func.inputs.map(param => ({\n                                name: param.name,\n                                type: param.type,\n                            })),\n                        };\n                    });\n                setFunctionInputs(ftns);\n                setDeployed(true);\n            } catch (error) {\n                console.error('Error deploying smart contract:', error);\n            }\n        }\n    };\n\n    async function measureMetrics() {\n        // setDeployed(true);\n        console.log('addState: ', addState);\n        if (!(deployed || addState)) {\n            window.alert('Deploy the smart contract first')\n        }\n        else if (!account) {\n            try {\n                console.log(\"At measure metrics elif \");\n                const ftn = functionInputs.filter(item => item.name === selectedFunction);\n                const type = ftn[0].stateMutability;\n                const api = {\n                    status: false,\n                    url: '',\n                }\n                const params = {\n                    network: 'Polygon-Mumbai',\n                    API: api,\n                    ABI: ABItext,\n                    address: ContractAddress,\n                    metric: selectedMetric,\n                    ftn: selectedFunction,\n                    ftnInputs: functionInputValues,\n                    type: type,\n                    transactions: selectedBatch\n                };\n                const response = await axios.get('http://10.1.33.124:8000/measure-function-call-metrics', { params });\n                console.log(response.data);\n                if (response.data.result.perf) {\n                    window.alert('Measured successfully');\n                    const date = new Date();\n                    const params = {\n                        address: '0x5719D02a5ebe5cA3AE722c703c24Ae5C845d0538',\n                        date: date.toLocaleDateString(),\n                        time: date.toTimeString(),\n                        network: selectedBlockchain,\n                        contract: contractName,\n                        metric: selectedMetric,\n                        ftn: selectedFunction,\n                        value: response.data.result.perf,\n                        fee: response.data.result.fee,\n                        tx: selectedMetric === 'Latency' ? 0 : selectedBatch\n                    }\n                    console.log(params);\n                    try {\n                        const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', { params });\n                        console.log(resp.data);\n                        dispatch(setChange(true));\n                    }\n                    catch (error) {\n                        console.error('Error fetching data:', error);\n                    }\n                } else {\n                    window.alert('Eror during measurments: ', response.data.result.perf);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // console.log('Metamask', account);\n            }\n        }\n        else {\n            console.log(functionInputs);\n            console.log(selectedFunction)\n            console.log('Function Inputs: ', functionInputValues);\n            console.log('Metric: ', selectedMetric);\n            // const selectedAccount = await connectToMetaMask();\n            const selectedAccount = account;\n            const contract = new web3.eth.Contract(ABI, ContractAddress);\n            // const contract = new web3.eth.Contract(Demo, '0x59226514FDDD51dA07dbd5adD54798F4236aBDB4');\n            const ftn = functionInputs.filter(item => item.name === selectedFunction);\n            console.log('ftn', ftn);\n            switch (selectedMetric) {\n                case 'Latency':\n                    if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n                        try {\n                            const startTime = performance.now();\n                            const response = await contract.methods[selectedFunction](...functionInputValues).call();\n                            const endTime = performance.now();\n                            const latency = (endTime - startTime) / 1000;\n                            console.log(response);\n                            console.log('Latency: ', latency);\n                            const date = new Date();\n                            const params = {\n                                address: account,\n                                date: date.toLocaleDateString(),\n                                time: date.toTimeString(),\n                                network: selectedBlockchain,\n                                contract: contractName,\n                                metric: selectedMetric,\n                                ftn: selectedFunction,\n                                value: latency,\n                                fee: 0,\n                                tx: 0\n                            }\n                            console.log(params);\n                            const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', { params });\n                            console.log(resp.data);\n                            dispatch(setChange(true));\n                        } catch (error) {\n                            console.error('Error:', error);\n                        }\n                    }\n                    else {\n                        console.log('At latnecy else');\n                        // const data = contract.methods[selectedFunction](...functionInputValues).encodeABI();\n                        const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n                        console.log('Gas', gas);\n                        const transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            // console.log(contract);\n                            // console.log(selectedAccount);\n                            const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                            const endTime = performance.now();\n                            const latency = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            const txFee = (Number(receipt.effectiveGasPrice) * Number(receipt.gasUsed)) / 1e18;\n                            console.log('Latency: ', latency);\n                            const date = new Date();\n                            const params = {\n                                address: account,\n                                date: date.toLocaleDateString(),\n                                time: date.toTimeString(),\n                                network: selectedBlockchain,\n                                contract: contractName,\n                                metric: selectedMetric,\n                                ftn: selectedFunction,\n                                value: latency,\n                                fee: txFee,\n                                tx: 0\n                            }\n                            console.log(params);\n                            const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', { params });\n                            console.log(resp.data);\n                            dispatch(setChange(true));\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                    }\n                    break;\n                case 'Throughput':\n                    console.log('Input Batch: ', selectedBatch);\n                    const promises = [];\n                    const nonce = await web3.eth.getTransactionCount(selectedAccount);\n                    const gas = await contract.methods[selectedFunction](...functionInputValues).estimateGas();\n                    for (let i = 0; i < Number(selectedBatch); i++) {\n                        if (ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view') {\n                            console.log('AT if TPS');\n                            promises.push(new Promise(async (resolve, reject) => {\n                                try {\n                                    const response = await contract.methods[selectedFunction](...functionInputValues).call();\n                                    // console.log('TPS response: ', response);\n                                    resolve(response);\n                                } catch (error) {\n                                    reject(error);\n                                }\n                            }));\n                        }\n                        else {\n                            const transactionObject = {\n                                from: selectedAccount,\n                                gas,\n                                gasPrice: '70000000000',\n                                nonce: Number(nonce) + i\n                            };\n                            promises.push(new Promise(async (resolve, reject) => {\n                                try {\n                                    const receipt = await contract.methods[selectedFunction](...functionInputValues).send(transactionObject);\n                                    // console.log('TPS response: ', response);\n                                    resolve(receipt);\n                                } catch (error) {\n                                    reject(error);\n                                }\n                            }));\n                        }\n                    }\n                    const startTime = performance.now();\n                    Promise.all(promises)\n                        .then(async (receipts) => {\n                            const endTime = performance.now();\n                            const duration = (endTime - startTime) / 1000;\n                            const throughput = Number(selectedBatch) / duration;\n                            console.log(`Transactions Per Second (TPS): ${throughput}`);\n                            console.log(receipts);\n                            let txFee = 0;\n                            for (let i = 0; i < selectedBatch; i++) {\n                                txFee += Number(receipts[i].effectiveGasPrice) * Number(receipts[i].gasUsed);\n                            }\n                            txFee = (txFee / selectedBatch) / 1e18;\n                            const date = new Date();\n                            const params = {\n                                address: account,\n                                date: date.toLocaleDateString(),\n                                time: date.toTimeString(),\n                                network: selectedBlockchain,\n                                contract: contractName,\n                                metric: selectedMetric,\n                                ftn: selectedFunction,\n                                value: throughput,\n                                fee: ftn[0].stateMutability === 'pure' || ftn[0].stateMutability === 'view' ? 0 : txFee,\n                                tx: selectedBatch\n                            }\n                            console.log(params);\n                            const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', { params });\n                            console.log(resp.data);\n                            dispatch(setChange(true));\n                            // resolve({ throughput, receipts });\n                        })\n                        .catch((error) => {\n                            console.error('Error:', error);\n                            // reject(error);\n                        });\n                default:\n                    return;\n            }\n        }\n    }\n\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => (\n        <div key={index}>\n            <label>{param.name}</label>\n            <input\n                type=\"text\"\n                placeholder={param.type}\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(index, e.target.value)}\n            />\n        </div>\n    ));\n\n    const jsxContent = (\n        <div>\n            {(deployed || addState) && (\n                <>\n                    <h4>Select smart contract function</h4>\n                    <select onChange={handleFunctionChange} value={selectedFunction}>\n                        <option value=\"\">Select a function</option>\n                        {functionInputs.map((item, index) => (\n                            <option key={index} value={item.name}>\n                                {item.name}\n                            </option>\n                        ))}\n                    </select>\n                </>\n            )}\n            {selectedFunction && (\n                <>\n                    <h4>Enter input values for the parameters of the selected function</h4>\n                    {functionInputs\n                        .find((item) => item.name === selectedFunction)\n                        .inputs.map((input, index) => (\n                            <input\n                                key={index}\n                                type={input.type}\n                                placeholder={input.name}\n                                value={functionInputValues[index] || ''}\n                                onChange={(event) => handlefunctionInputChange(event, index)}\n                            />\n                        ))}\n                </>\n            )}\n\n            {selectedFunction && (\n                <>\n                    <h4>Select the performance metric </h4>\n                    <select onChange={handleMetricChange} value={selectedMetric}>\n                        <option value=\"\">Select a metric</option>\n                        <option value=\"Latency\">Latency</option>\n                        <option value=\"Throughput\">Throughput</option>\n                    </select>\n                </>)}\n\n            {selectedMetric === 'Throughput' && (\n                <>\n                    <h4>Select input batch transactions</h4>\n                    <select onChange={handleTransactionsChange} value={selectedBatch}>\n                        <option value=\"\">Select a number</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"25\">25</option>\n                        <option value=\"50\">50</option>\n                    </select>\n                </>\n            )}\n\n        </div>\n    );\n\n    const addContent = (\n        <div>\n            {add && (\n                <>\n                    <label>Enter smart contract address</label>\n                    <input\n                        type=\"text\"\n                        name=\"address\"\n                        value={ContractAddress}\n                        onChange={handleContractAddressChange}\n                        placeholder=\"Smart contract address\"\n                        required\n                    />\n                    <h4>Paste contract ABI below:</h4>\n                    <textarea\n                        className=\"inner_ABI\"\n                        id=\"large-text-ABI\"\n                        name=\"large-text-ABI\"\n                        rows=\"25\"\n                        cols=\"70\"\n                        value={ABItext}\n                        onChange={handleABIAreaChange}\n                    ></textarea>\n                    <br />\n                </>\n            )}\n\n        </div>\n    );\n\n    function addContract() {\n        setAdd(true);\n    }\n\n    return (\n        <div className=\"text-area\">\n            <label>Enter smart contract name</label>\n            <input\n                type=\"text\"\n                name=\"endPoint\"\n                value={contractName}\n                onChange={handleContractNameChange}\n                placeholder=\"Smart contract name\"\n                required\n            />\n            <br></br><br></br>\n            <label>Select a Blockchain: </label>\n            <select value={selectedBlockchain} onChange={handleBlockchainChange}>\n                <option value=\"\">Select blockchain</option>\n                <option value=\"Arbitum-Goerli\">Arbitum</option>\n                <option value=\"Celo\">Alfajores</option>\n                <option value=\"Linea-Goerli\">Linea</option>\n                <option value=\"Optimism-Goerli\">Optimism</option>\n                <option value=\"Polygon-Mumbai\">Mumbai</option>\n                <option value=\"Sepolia\">Sepolia</option>\n                <option value=\"All\">All</option>\n            </select>\n            <h4>Paste your code below:</h4>\n            <textarea\n                className=\"inner\"\n                id=\"large-text\"\n                name=\"large-text\"\n                rows=\"25\"\n                cols=\"70\"\n                value={text}\n                onChange={handleTextAreaChange}\n            ></textarea>\n            <br />\n            <h4>Or upload the code file here:</h4>\n            <FileUpload onFileContent={handleFileContent} />\n            <button className=\"compile-button\" onClick={compileContract}> Compile Contract </button>\n            {inputBoxes}\n            <button onClick={deployContract}>Deploy Contract</button>\n            <button onClick={addContract}>Add Contract</button>\n            {addContent}\n            {jsxContent}\n            <button onClick={measureMetrics}>Measure</button>\n        </div>\n    );\n}\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}