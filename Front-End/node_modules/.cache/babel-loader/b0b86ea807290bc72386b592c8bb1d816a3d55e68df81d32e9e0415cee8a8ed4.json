{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextArea() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [inputValues, setInputValues] = useState([]);\n  const [constructorInputs, setConstructorInputs] = useState([]);\n  const [compiled, setCompiled] = useState(false);\n\n  // Function to handle changes in input values\n  const handleInputChange = (index, value) => {\n    const newInputValues = [...inputValues];\n    newInputValues[index] = value;\n    setInputValues(newInputValues);\n  };\n  const handleTextAreaChange = async e => {\n    setText(e.target.value);\n  };\n  async function compileAndDeploy() {\n    const params = {\n      contractName: 'Storage',\n      sourceCode: text,\n      network: 'Something'\n    };\n    try {\n      console.log(\"At text area\");\n      const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', {\n        params\n      });\n      console.log(response.data);\n      if (response.data.result.abi) {\n        window.alert('Compiled successfully');\n      } else {\n        window.alert(response.data.result);\n      }\n      // Find the constructor in the ABI\n      const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n      if (constructor) {\n        // Access constructor parameters and their types\n        const constructorInputs = constructor.inputs || [];\n        console.log('Constructor Parameters:');\n        constructorInputs.forEach(param => {\n          console.log(`Name: ${param.name}, Type: ${param.type}`);\n        });\n        setConstructorInputs(constructorInputs);\n      } else {\n        console.log('No constructor found in the ABI.');\n      }\n      console.log('Constructor Inputs', constructorInputs);\n      setCompiled(true);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  // Function to deploy the contract\n  const deployContract = () => {\n    // Access the values of the input boxes from the inputValues array\n    console.log('Input Values:', inputValues);\n    // Continue with your deployment logic...\n  };\n\n  // Render input boxes based on constructor inputs\n  const inputBoxes = constructorInputs.map((param, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: param.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: param.type,\n      value: inputValues[index] || '',\n      onChange: e => handleInputChange(index, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Paste your code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"inner\",\n      id: \"large-text\",\n      name: \"large-text\",\n      rows: \"25\",\n      cols: \"70\",\n      value: text,\n      onChange: handleTextAreaChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Or upload the code file here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"compile-button\",\n      onClick: compileAndDeploy,\n      children: \" Compile & Deploy \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), inputBoxes, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deployContract,\n      children: \"Deploy Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(TextArea, \"use5Ah87fGubRtDEkxl7gs4LuC0=\");\n_c = TextArea;\nexport default TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"names":["React","useState","axios","FileUpload","jsxDEV","_jsxDEV","TextArea","_s","text","setText","inputValues","setInputValues","constructorInputs","setConstructorInputs","compiled","setCompiled","handleInputChange","index","value","newInputValues","handleTextAreaChange","e","target","compileAndDeploy","params","contractName","sourceCode","network","console","log","response","get","data","result","abi","window","alert","constructor","find","item","type","inputs","forEach","param","name","error","deployContract","inputBoxes","map","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","className","id","rows","cols","onClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from 'axios';\nimport FileUpload from \"../File/File.component\";\nimport './Text-Area.styles.css';\n\nfunction TextArea() {\n    const [text, setText] = useState(\"\");\n    const [inputValues, setInputValues] = useState([]);\n    const [constructorInputs, setConstructorInputs] = useState([]);\n    const [compiled, setCompiled] = useState(false);\n\n    // Function to handle changes in input values\n    const handleInputChange = (index, value) => {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = value;\n        setInputValues(newInputValues);\n    };\n\n    const handleTextAreaChange = async (e) => {\n        setText(e.target.value);\n    };\n\n    async function compileAndDeploy() {\n        const params = {\n            contractName: 'Storage',\n            sourceCode: text,\n            network: 'Something'\n        };\n        try {\n            console.log(\"At text area\");\n            const response = await axios.get('http://10.1.33.124:8000/compile-and-deploy', { params });\n            console.log(response.data);\n            if (response.data.result.abi) {\n                window.alert('Compiled successfully');\n            } else {\n                window.alert(response.data.result);\n            }\n            // Find the constructor in the ABI\n            const constructor = response.data.result.abi.find(item => item.type === 'constructor');\n            if (constructor) {\n                // Access constructor parameters and their types\n                const constructorInputs = constructor.inputs || [];\n                console.log('Constructor Parameters:');\n                constructorInputs.forEach(param => {\n                    console.log(`Name: ${param.name}, Type: ${param.type}`);\n                });\n                setConstructorInputs(constructorInputs);\n            } else {\n                console.log('No constructor found in the ABI.');\n            }\n            console.log('Constructor Inputs', constructorInputs);\n            setCompiled(true);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    // Function to deploy the contract\n    const deployContract = () => {\n        // Access the values of the input boxes from the inputValues array\n        console.log('Input Values:', inputValues);\n        // Continue with your deployment logic...\n    };\n\n    // Render input boxes based on constructor inputs\n    const inputBoxes = constructorInputs.map((param, index) => (\n        <div key={index}>\n            <label>{param.name}</label>\n            <input\n                type=\"text\"\n                placeholder={param.type}\n                value={inputValues[index] || ''}\n                onChange={(e) => handleInputChange(index, e.target.value)}\n            />\n        </div>\n    ));\n\n    return (\n        <div className=\"text-area\">\n            <h4>Paste your code below:</h4>\n            <textarea\n                className=\"inner\"\n                id=\"large-text\"\n                name=\"large-text\"\n                rows=\"25\"\n                cols=\"70\"\n                value={text}\n                onChange={handleTextAreaChange}\n            ></textarea>\n            <br />\n            <h4>Or upload the code file here:</h4>\n            <FileUpload></FileUpload>\n            <button className=\"compile-button\" onClick={compileAndDeploy}> Compile & Deploy </button>\n            {inputBoxes}\n            <button onClick={deployContract}>Deploy Contract</button>\n        </div>\n    );\n}\n\nexport default TextArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}