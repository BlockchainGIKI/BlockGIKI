[{"/home/user/Documents/Performance-main/src/index.js":"1","/home/user/Documents/Performance-main/src/App.js":"2","/home/user/Documents/Performance-main/src/reportWebVitals.js":"3","/home/user/Documents/Performance-main/src/Components/Custom-Button/Custom-button.component.jsx":"4","/home/user/Documents/Performance-main/src/Components/Header/Header.component.jsx":"5","/home/user/Documents/Performance-main/src/Components/Main-Dashboard/Main-dashboard.component.jsx":"6","/home/user/Documents/Performance-main/src/Components/DynamicTable/DynamicTable.component.jsx":"7","/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx":"8","/home/user/Documents/Performance-main/src/Components/Performance-Metric/PerformanceMetricData.js":"9","/home/user/Documents/Performance-main/src/Components/File/File.component.jsx":"10","/home/user/Documents/Performance-main/src/Components/Text-Area/Demo.js":"11","/home/user/Documents/Performance-main/src/store.js":"12","/home/user/Documents/Performance-main/src/accountSlice.js":"13","/home/user/Documents/Performance-main/src/Components/Main-Dashboard/Contract.js":"14","/home/user/Documents/Performance-main/src/Components/Main-Dashboard/constants.js":"15","/home/user/Documents/Performance-main/src/changeSlice.js":"16","/home/user/Documents/Performance-main/src/Components/Navigation/Navbar.js":"17","/home/user/Documents/Performance-main/src/Components/Instructions/Instructions.js":"18"},{"size":535,"mtime":1699863930000,"results":"19","hashOfConfig":"20"},{"size":1276,"mtime":1701182339051,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1699863930000,"results":"22","hashOfConfig":"20"},{"size":2068,"mtime":1700464719994,"results":"23","hashOfConfig":"20"},{"size":683,"mtime":1699863930000,"results":"24","hashOfConfig":"20"},{"size":19224,"mtime":1700651356995,"results":"25","hashOfConfig":"20"},{"size":3746,"mtime":1700643750752,"results":"26","hashOfConfig":"20"},{"size":29977,"mtime":1700826190342,"results":"27","hashOfConfig":"20"},{"size":767,"mtime":1699863930000,"results":"28","hashOfConfig":"20"},{"size":1010,"mtime":1700564247693,"results":"29","hashOfConfig":"20"},{"size":623,"mtime":1700556899287,"results":"30","hashOfConfig":"20"},{"size":258,"mtime":1700640442520,"results":"31","hashOfConfig":"20"},{"size":425,"mtime":1700467455878,"results":"32","hashOfConfig":"20"},{"size":4407,"mtime":1700468506851,"results":"33","hashOfConfig":"20"},{"size":1471,"mtime":1700468481741,"results":"34","hashOfConfig":"20"},{"size":416,"mtime":1700641897998,"results":"35","hashOfConfig":"20"},{"size":337,"mtime":1701181574757,"results":"36","hashOfConfig":"20"},{"size":148,"mtime":1701175101307,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1ceier2",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Documents/Performance-main/src/index.js",[],[],["96"],"/home/user/Documents/Performance-main/src/App.js",[],[],"/home/user/Documents/Performance-main/src/reportWebVitals.js",[],[],"/home/user/Documents/Performance-main/src/Components/Custom-Button/Custom-button.component.jsx",[],[],"/home/user/Documents/Performance-main/src/Components/Header/Header.component.jsx",[],[],"/home/user/Documents/Performance-main/src/Components/Main-Dashboard/Main-dashboard.component.jsx",["97","98","99","100"],[],"import React, { useState, useEffect } from 'react';\nimport './Main-dashboard.styles.css';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { setChange } from \"../../changeSlice\";\nimport abi from './Contract';\nimport config from './constants';\nimport Web3 from \"web3\";\n\nconst MainDashboard = () => {\n    const dispatch = useDispatch();\n    const [selectedBlockchain, setSelectedBlockchain] = useState('');\n    const [endPoint, setEndPoint] = useState('');\n    const [selectedSmartContract, setSelectedSmartContract] = useState('');\n    const [metric, setSelectedMetric] = useState('');\n    const [transactions, setTransactions] = useState('');\n    const account = useSelector(selectAccount);\n\n    const handleBlockchainChange = (e) => {\n        setSelectedBlockchain(e.target.value);\n    };\n\n    const handleMetricChange = (e) => {\n        setSelectedMetric(e.target.value);\n    };\n\n    const handleContractChange = (e) => {\n        setSelectedSmartContract(e.target.value);\n    };\n\n    const handleChange = (e) => {\n        setEndPoint(e.target.value)\n    };\n\n    const handleTransactionsChange = (e) => {\n        setTransactions(e.target.value);\n    };\n    const [web3, setWeb3] = useState(null);\n    useEffect(() => {\n        // Check if Web3 is available\n        if (window.ethereum) {\n            // Use MetaMask's provider\n            const web3Instance = new Web3(window.ethereum);\n            console.log(web3Instance);\n            setWeb3(web3Instance);\n        } else {\n            console.error('MetaMask not detected. Please install MetaMask.');\n        }\n    }, []);\n\n    async function measureMetrics() {\n        const selectedAccount = account;\n        const ContractAddress = config[selectedBlockchain]['ContractAddress'];\n        // const web3 = new Web3(config[selectedBlockchain]['RPC']);\n        const contract = new web3.eth.Contract(abi, ContractAddress);\n        var gas = 0;\n        var transactionObject = {};\n        console.log('At mM', metric);\n        return new Promise(async (resolve, reject) => {\n            if (metric === 'Latency') {\n                console.log('At mM', metric);\n                switch (selectedSmartContract) {\n                    case 'createUser':\n                        gas = await contract.methods.createUser(\"John Doe\", 100).estimateGas();\n                        transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            const receipt = await contract.methods.createUser(\"John Doe\", 100).send(transactionObject);\n                            const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n                            const endTime = performance.now();\n                            const perf_metric = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', perf_metric);\n                            console.log('Transaction Fee: ', transactionFee);\n                            resolve({ perf_metric, transactionFee });\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                        break;\n                    case 'issueMoney':\n                        gas = await contract.methods.issueMoney(100, 1).estimateGas()\n                        transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                            const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n                            const endTime = performance.now();\n                            const perf_metric = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', perf_metric);\n                            console.log('Transaction Fee: ', transactionFee);\n                            resolve({ perf_metric, transactionFee });\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                        break;\n                    case 'transferMoney':\n                        gas = await contract.methods.transferMoney(1, 1, 2).estimateGas()\n                        transactionObject = {\n                            from: selectedAccount,\n                            gas,\n                            gasPrice: '70000000000',\n                        };\n                        try {\n                            const startTime = performance.now();\n                            const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                            const transactionFee = web3.utils.fromWei(receipt.effectiveGasPrice * receipt.gasUsed, \"ether\");\n                            const endTime = performance.now();\n                            const perf_metric = (endTime - startTime) / 1000;\n                            console.log(receipt);\n                            console.log('Latency: ', perf_metric);\n                            console.log('Transaction Fee: ', transactionFee);\n                            resolve({ perf_metric, transactionFee });\n                        }\n                        catch (error) {\n                            console.log(\"Error: \", error);\n                        }\n                        break;\n                    default:\n                        const startTime = performance.now();\n                        console.log('At deafult', selectedSmartContract);\n                        const response = await contract.methods[selectedSmartContract](1).call();\n                        const endTime = performance.now();\n                        const perf_metric = (endTime - startTime) / 1000;\n                        console.log(response);\n                        const transactionFee = 0;\n                        console.log('Latency: ', perf_metric, transactionFee);\n                        resolve({ perf_metric, transactionFee });\n                }\n            }\n            else if (metric === 'Throughput') {\n                console.log('At mM', metric);\n                const promises = [];\n                // const nonce = await web3.eth.getTransactionCount(defaultAccount);\n                for (let i = 0; i < Number(transactions); i++) {\n                    if (selectedSmartContract === 'getUser') {\n                        console.log('AT if TPS');\n                        promises.push(new Promise(async (resolve, reject) => {\n                            try {\n                                const response = await contract.methods[selectedSmartContract](1).call()\n                                // const fee = 0;\n                                // console.log('TPS response: ', response);\n                                resolve(response);\n                            } catch (error) {\n                                reject(error);\n                            }\n                        }));\n                    }\n                    else {\n                        switch (selectedSmartContract) {\n                            case 'createUser':\n                                gas = await contract.methods.createUser(\"John Doe\", 100).estimateGas();\n                                transactionObject = {\n                                    from: selectedAccount,\n                                    gas,\n                                    gasPrice: '70000000000',\n                                };\n                                promises.push(new Promise(async (resolve, reject) => {\n                                    try {\n                                        const receipt = await contract.methods.createUser('John Doe', 100).send(transactionObject);\n                                        // console.log('TPS response: ', response);\n                                        resolve(receipt);\n                                    } catch (error) {\n                                        reject(error);\n                                    }\n                                }));\n                                break;\n                            case 'issueMoney':\n                                gas = await contract.methods.issueMoney(100, 1).estimateGas()\n                                transactionObject = {\n                                    from: selectedAccount,\n                                    gas,\n                                    gasPrice: '70000000000',\n                                };\n                                promises.push(new Promise(async (resolve, reject) => {\n                                    try {\n                                        const receipt = await contract.methods.issueMoney(100, 1).send(transactionObject);\n                                        // console.log('TPS response: ', response);\n                                        resolve(receipt);\n                                    } catch (error) {\n                                        reject(error);\n                                    }\n                                }));\n                                break;\n                            case 'transferMoney':\n                                gas = await contract.methods.transferMoney(1, 1, 2).estimateGas()\n                                transactionObject = {\n                                    from: selectedAccount,\n                                    gas,\n                                    gasPrice: '70000000000',\n                                };\n                                promises.push(new Promise(async (resolve, reject) => {\n                                    try {\n                                        const receipt = await contract.methods.transferMoney(1, 1, 2).send(transactionObject);\n                                        // console.log('TPS response: ', response);\n                                        resolve(receipt);\n                                    } catch (error) {\n                                        reject(error);\n                                    }\n                                }));\n                                break;\n                            default:\n                        }\n                    }\n                }\n                const startTime = performance.now();\n                Promise.all(promises)\n                    .then((receipts) => {\n                        const endTime = performance.now();\n                        const duration = (endTime - startTime) / 1000;\n                        const perf_metric = Number(transactions) / duration;\n                        console.log(`Transactions Per Second (TPS): ${perf_metric}`);\n                        console.log(receipts);\n                        const transactionFee = receipts;\n                        resolve({ perf_metric, transactionFee });\n                    })\n                    .catch((error) => {\n                        console.error('Error:', error);\n                        // reject(error);\n                    });\n            }\n        });\n    }\n\n\n    async function requestAccount() {\n        console.log(\"At standard button: \", selectedSmartContract);\n        if (account) {\n            if (selectedBlockchain === 'All') {\n                window.alert('Please manually change the blockcain networks to one of the supported 6 networks in your wallet provider');\n                return;\n            }\n            var { perf_metric, transactionFee } = await measureMetrics();\n            console.log('Perf: ', perf_metric, transactionFee);\n            let txFee = 0;\n            if (metric === 'Throughput') {\n                if (selectedSmartContract !== 'getUser') {\n                    for (let i = 0; i < transactions; i++) {\n                        txFee += Number(transactionFee[i].effectiveGasPrice) * Number(transactionFee[i].gasUsed);\n                    }\n                    txFee = (txFee / transactions) / 1e18;\n                }\n                transactionFee = txFee;\n            }\n            try {\n                var params = {\n                    _perfMetric: perf_metric,\n                    _fee: transactionFee,\n                    network: selectedBlockchain,\n                    selectedFunction: selectedSmartContract,\n                    numTransactions: transactions,\n                    metric: metric\n                };\n                console.log(params);\n                const response = await axios.get('http://10.1.33.124:8000/write-to-metrics-csv', { params });\n                console.log(response.data);\n                const date = new Date();\n                params = {\n                    address: account,\n                    date: date.toLocaleDateString(),\n                    time: date.toTimeString(),\n                    network: selectedBlockchain,\n                    contract: 'Benchmark',\n                    metric: metric,\n                    ftn: selectedSmartContract,\n                    value: perf_metric,\n                    fee: transactionFee,\n                    tx: metric === 'Latency' ? 0 : transactions\n                }\n                console.log(params);\n                const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', { params });\n                console.log(resp.data);\n                dispatch(setChange(true));\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        }\n        else {\n            const api = {\n                status: endPoint ? true : false,\n                url: endPoint,\n            }\n            const address = {\n                status: false,\n                address: '0x'\n            }\n            const networks = ['Sepolia', 'Polygon-Mumbai', 'Arbitrum-Goerli', 'Optimism-Goerli', 'Linea-Goerli', 'Celo'];\n            const count = selectedBlockchain === 'All' ? 6 : 1;\n            console.log('BC', selectedBlockchain);\n            for (let i = 0; i < count; i++) {\n                console.log('Count: ', count);\n                var params = {\n                    metric: metric,\n                    network: selectedBlockchain !== 'All' ? selectedBlockchain : networks[i],\n                    API: api,\n                    address: address,\n                    transactions: transactions,\n                    function_name: selectedSmartContract,\n                };\n                console.log('Params: ', params);\n                try {\n                    const response = await axios.get('http://10.1.33.124:8000/run-node-script', { params });\n                    console.log(response.data);\n                    const date = new Date();\n                    params = {\n                        address: '0x5719D02a5ebe5cA3AE722c703c24Ae5C845d0538',\n                        date: date.toLocaleDateString(),\n                        time: date.toTimeString(),\n                        network: selectedBlockchain !== 'All' ? selectedBlockchain : networks[i],\n                        contract: 'Benchmark',\n                        metric: metric,\n                        ftn: selectedSmartContract,\n                        value: response.data.result.perf,\n                        fee: response.data.result.txFee,\n                        tx: metric === 'Latency' ? 0 : transactions\n                    }\n                    console.log(params);\n                    const resp = await axios.get('http://10.1.33.124:8000/write-to-user-metric-csv', { params });\n                    console.log(resp.data);\n                    dispatch(setChange(true));\n                } catch (error) {\n                    console.error('Error fetching data:', error);\n                }\n            }\n        }\n    }\n\n    return (\n        <div className=\"card-main\">\n            <label>Select a Blockchain: </label>\n            <select value={selectedBlockchain} onChange={handleBlockchainChange}>\n                <option value=\"\">Select blockchain</option>\n                <option value=\"Arbitum-Goerli\">Arbitum</option>\n                <option value=\"Celo\">Alfajores</option>\n                <option value=\"Linea-Goerli\">Linea</option>\n                <option value=\"Optimism-Goerli\">Optimism</option>\n                <option value=\"Polygon-Mumbai\">Mumbai</option>\n                <option value=\"Sepolia\">Sepolia</option>\n                <option value=\"All\">All</option>\n            </select><br></br><br></br>\n            <div className=\"row\">\n                <div className=\"col-25\">\n                    <label>Enter end point API key</label>\n                </div>\n                <div className=\"col-75\">\n                    <input\n                        type=\"text\"\n                        name=\"endPoint\"\n                        value={endPoint}\n                        onChange={handleChange}\n                        placeholder=\"Type Endpoint API key (optional)\"\n                        required\n                    />\n                </div>\n            </div><br></br><br></br>\n            <label>Select a Performance metric: </label>\n            <select value={metric} onChange={handleMetricChange}>\n                <option value=\"\">Select metric</option>\n                <option value=\"Latency\">Latency</option>\n                <option value=\"Throughput\">Throughput</option>\n                {/* <option value=\"default\">All</option> */}\n            </select><br></br><br></br>\n            {(metric === \"Throughput\" || metric === \"both\") && (\n                <div>\n                    <label>No. of transactions: </label>\n                    <select value={transactions} onChange={handleTransactionsChange}>\n                        <option value=\"\">Select transactions</option>\n                        <option value=\"10\">10</option>\n                        <option value=\"25\">25</option>\n                        <option value=\"50\">50</option>\n                    </select><br></br><br></br>\n                </div>\n            )}\n            <label>Default smart contracts: </label>\n            <select value={selectedSmartContract} onChange={handleContractChange}>\n                <option value=\"\">Select function</option>\n                <option value=\"createUser\">Create User</option>\n                <option value=\"issueMoney\">Issue money</option>\n                <option value=\"transferMoney\">Transfer Money</option>\n                <option value=\"getUser\">Get User</option>\n            </select><br></br><br></br>\n            <button className=\"compute-button\" onClick={requestAccount}> Compute </button>\n        </div>\n    )\n}\n\nexport default MainDashboard;\n","/home/user/Documents/Performance-main/src/Components/DynamicTable/DynamicTable.component.jsx",["101"],[],"import React, { useEffect, useState } from \"react\";\nimport TransactionHistory from \"../Performance-Metric/PerformanceMetricData\";\nimport './DynamicTable.styles.css';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAccount } from \"../../accountSlice\";\nimport { selectChange } from \"../../changeSlice\";\nimport { setChange } from \"../../changeSlice\";\n\nconst DynamicTable = () => {\n    // get table column\n    var column;\n    var actualValue = {};\n    var tableData = [];\n    // Get table headers in array\n    const [col, setColumn] = useState([]);\n    const account = useSelector(selectAccount);\n    const change = useSelector(selectChange);\n    const dispatch = useDispatch();\n    // Fetch table headers on component mount\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const params = { account: account };\n                const response = await axios.get('http://10.1.33.124:8000/get-latency-data', { params });\n                // console.log(\"Crank Gameplayes: \", response.data);\n                // Assuming your response.data is an array of column names\n                setColumn(response.data);\n                console.log('Chnage: ', change);\n                dispatch(setChange(false));\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n        fetchData();\n    }, [account, change]);\n    column = Object.keys(TransactionHistory[0]);\n    // Object.assign(actualValue, TransactionHistory);\n    if (col.length > 0) {\n        column = Object.keys(col[0]);\n        Object.assign(actualValue, col);\n        tableData = Object.values(actualValue);\n    }\n    else {\n        tableData = [];\n    }\n    // console.log(\"Table data\", tableData);\n    // get table heading data\n    const ThData = () => {\n        return column.map((data) => {\n            return <th key={data}>{data}</th>\n        })\n    }\n\n    // get table row data\n    const tdData = () => {\n        return tableData.map((data) => {\n            return (\n                <tr>\n                    {\n                        column.map((v) => {\n                            return <td>{data[v]}</td>\n                        })\n                    }\n                </tr>\n            )\n        })\n    }\n\n    async function downloadFile() {\n        try {\n            const params = { account: account };\n            const response = await axios.get('http://10.1.33.124:8000/send-user-metric-csv', {\n                params,\n                responseType: 'blob',\n            });\n            // Create a Blob from the response data\n            const blob = new Blob([response.data], { type: 'text/csv' });\n            // Create a link element and set its attributes\n            const link = document.createElement('a');\n            link.href = window.URL.createObjectURL(blob);\n            link.download = 'downloaded-file.csv';\n            // Append the link to the document and trigger the click event\n            document.body.appendChild(link);\n            link.click();\n            // Remove the link from the document\n            document.body.removeChild(link);\n        } catch (error) {\n            console.error('Error downloading file:', error);\n        }\n    };\n\n    return (\n        <div className=\"card-Dynamic\">\n            <h4> Performance metric table </h4>\n            <table>\n                <thead>\n                    <tr>{ThData()}</tr>\n                </thead>\n                <tbody>\n                    {tdData()}\n                </tbody>\n            </table>\n            <button className=\"download-button\" onClick={downloadFile}> Download Data </button>\n        </div>\n    )\n}\n\nexport default DynamicTable;\n","/home/user/Documents/Performance-main/src/Components/Text-Area/Text-Area.component.jsx",[],[],"/home/user/Documents/Performance-main/src/Components/Performance-Metric/PerformanceMetricData.js",[],[],"/home/user/Documents/Performance-main/src/Components/File/File.component.jsx",["102"],[],"import React, { useState } from 'react';\n\nfunction FileUpload({ onFileContent }) {\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [fileContent, setFileContent] = useState(null);\n\n    const handleFileChange = (event) => {\n        const file = event.target.files[0];\n        setSelectedFile(file);\n        if (file) {\n            // Read the file content\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const content = e.target.result;\n                setFileContent(content);\n                // console.log('Content: ', content);\n                onFileContent(content);\n            };\n            reader.readAsText(file);\n        }\n    };\n\n\n\n    return (\n        <div>\n            <input type=\"file\" onChange={handleFileChange} />\n            {selectedFile && (\n                <div>\n                    <p>File Size: {selectedFile.size} bytes</p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default FileUpload;\n","/home/user/Documents/Performance-main/src/Components/Text-Area/Demo.js",[],[],"/home/user/Documents/Performance-main/src/store.js",[],[],"/home/user/Documents/Performance-main/src/accountSlice.js",[],[],"/home/user/Documents/Performance-main/src/Components/Main-Dashboard/Contract.js",[],[],"/home/user/Documents/Performance-main/src/Components/Main-Dashboard/constants.js",[],[],"/home/user/Documents/Performance-main/src/changeSlice.js",[],[],"/home/user/Documents/Performance-main/src/Components/Navigation/Navbar.js",[],[],"/home/user/Documents/Performance-main/src/Components/Instructions/Instructions.js",[],[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":169,"column":59,"nodeType":"107","messageId":"108","endLine":177,"endColumn":34},{"ruleId":"105","severity":1,"message":"106","line":186,"column":59,"nodeType":"107","messageId":"108","endLine":194,"endColumn":34},{"ruleId":"105","severity":1,"message":"106","line":203,"column":59,"nodeType":"107","messageId":"108","endLine":211,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":303,"column":21,"nodeType":"111","messageId":"112","endLine":303,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":36,"column":8,"nodeType":"115","endLine":36,"endColumn":25,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":5,"column":12,"nodeType":"111","messageId":"119","endLine":5,"endColumn":23},"no-new-object",["120"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'transactionObject'.","ArrowFunctionExpression","unsafeRefs","no-redeclare","'params' is already defined.","Identifier","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["121"],"no-unused-vars","'fileContent' is assigned a value but never used.","unusedVar","no-object-constructor",{"desc":"122","fix":"123"},"Update the dependencies array to be: [account, change, dispatch]",{"range":"124","text":"125"},[1434,1451],"[account, change, dispatch]"]